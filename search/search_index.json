{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Latest","text":""},{"location":"#package-comparison","title":"Package ComparisonDjango vs FastAPI vs Flask","text":"<p>A comprehensive guide on choosing the right python web framework</p> <p> Read more \ud83d\udcc5 Jul 29, 2024 </p> <p> View More </p>"},{"location":"#package-articles","title":"Package ArticlesDiscord.pyasyncio \u2014 Asynchronous I/O","text":"<p>A Simplistic approach to creating your own Discord bot using Python.</p> <p> Read more \ud83d\udcc5 Apr 04, 2023 </p> <p>A comprehensive guide on how to work with asyncio.</p> <p> Read more \ud83d\udcc5 Apr 01, 2024 </p> <p> View More </p>"},{"location":"#python-basics","title":"Python BasicsInstalling Python on WindowsInstalling Packages Using pip","text":"<p>A step-by-step guide on installing Python on Windows for beginners.</p> <p> Read more \ud83d\udcc5 Aug 01, 2023 </p> <p>A guide on how to install Python packages using pip, the Python package manager.</p> <p> Read more \ud83d\udcc5 Aug 01, 2023 </p> <p> View More </p>"},{"location":"#cheatsheets","title":"CheatsheetsPython Basics","text":"<p>A Python cheatsheet covering variables, data types, control structures, functions, file operations, classes, exceptions handling, modules, and virtual environments, with concise explanations and examples for all skill levels.</p> <p> Read more \ud83d\udcc5 Apr 01, 2024 </p> <p> View More </p>"},{"location":"calendar/","title":"Coming Soon","text":""},{"location":"cheatsheets/","title":"Cheat Sheets","text":"<p>A comprehensive collection of Python cheatsheets covering fundamental concepts and advanced topics, providing clear explanations and practical examples for easy reference.</p>"},{"location":"cheatsheets/#latest-sheets","title":"Latest Sheets","text":"Python Basics <p>A Python cheatsheet covering variables, data types, control structures, functions, file operations, classes, exceptions handling, modules, and virtual environments, with concise explanations and examples for all skill levels.</p> <p> Read more \ud83d\udcc5 Apr 01, 2024 </p>"},{"location":"cheatsheets/python-basics/","title":"Python Basics","text":"","tags":["cheatsheets","python","basics"]},{"location":"cheatsheets/python-basics/#variables-and-data-types","title":"Variables and Data Types","text":"<pre><code># Integer\nnum = 10\n\n# Float\npi = 3.14\n\n# String\nname = \"John\"\n\n# Boolean\nis_true = True\n</code></pre>","tags":["cheatsheets","python","basics"]},{"location":"cheatsheets/python-basics/#lists","title":"Lists","text":"<pre><code>my_list = [1, 2, 3, 4, 5]\n\n# Accessing elements\nprint(my_list[0])  # Output: 1\n\n# Slicing\nprint(my_list[1:3])  # Output: [2, 3]\n\n# List methods\nmy_list.append(6)\nmy_list.pop()\n</code></pre>","tags":["cheatsheets","python","basics"]},{"location":"cheatsheets/python-basics/#control-structures","title":"Control Structures","text":"","tags":["cheatsheets","python","basics"]},{"location":"cheatsheets/python-basics/#if-else","title":"If-Else","text":"<pre><code>x = 10\n\nif x &gt; 5:\n    print(\"x is greater than 5\")\nelse:\n    print(\"x is not greater than 5\")\n</code></pre>","tags":["cheatsheets","python","basics"]},{"location":"cheatsheets/python-basics/#loops","title":"Loops","text":"<p>For Loop <pre><code>for i in range(5):\n    print(i)\n</code></pre></p> <p>While Loop <pre><code>count = 0\nwhile count &lt; 5:\n    print(count)\n    count += 1\n</code></pre></p>","tags":["cheatsheets","python","basics"]},{"location":"cheatsheets/python-basics/#functions","title":"Functions","text":"<pre><code>def greet(name):\n    print(\"Hello, \" + name + \"!\")\n</code></pre>","tags":["cheatsheets","python","basics"]},{"location":"cheatsheets/python-basics/#file-operations","title":"File Operations","text":"<pre><code># Writing to a file\nwith open(\"example.txt\", \"w\") as f:\n    f.write(\"Hello, World!\")\n\n# Reading from a file\nwith open(\"example.txt\", \"r\") as f:\n    content = f.read()\n    print(content)\n</code></pre>","tags":["cheatsheets","python","basics"]},{"location":"cheatsheets/python-basics/#classes","title":"Classes","text":"<pre><code>class Car:\n    def __init__(self, make, model):\n        self.make = make\n        self.model = model\n\n    def display_info(self):\n        print(f\"{self.make} {self.model}\")\n</code></pre>","tags":["cheatsheets","python","basics"]},{"location":"cheatsheets/python-basics/#exceptions-handling","title":"Exceptions Handling","text":"<pre><code>try:\n    result = 10 / 0\nexcept ZeroDivisionError:\n    print(\"Cannot divide by zero!\")\n</code></pre>","tags":["cheatsheets","python","basics"]},{"location":"cheatsheets/python-basics/#modules","title":"Modules","text":"<pre><code>import math\n\nprint(math.sqrt(16))  # Output: 4.0\n</code></pre>","tags":["cheatsheets","python","basics"]},{"location":"cheatsheets/python-basics/#virtual-environments","title":"Virtual Environments","text":"<pre><code># Create a virtual environment\npython -m venv myenv\n\n# Activate the virtual environment\nsource myenv/bin/activate\n\n# Deactivate the virtual environment\ndeactivate\n</code></pre>","tags":["cheatsheets","python","basics"]},{"location":"contribute/","title":"Contribute to learn.piptrends.com","text":"<p>Thank you for considering contributing to Learn-Pip-Trends! This is a fantastic opportunity to make your first open-source contribution. We welcome well-crafted articles discussing the latest trends and updates in the Python ecosystem, as well as updates to existing articles.</p> <p>Before submitting your contribution, we kindly ask you to read and follow our contributing guidelines to ensure a smooth and efficient review process.</p> <p>To contribute by submitting an article to learn-piptrends.com, please follow these steps:</p> <ul> <li>Fork this repository</li> <li>Create a new branch: <code>git checkout -b your-branch-name</code></li> <li>Create an article <code>(.md)</code> and store it in the respective folder(<code>docs\\getting-started\\package-articles</code> for articles about python packages, <code>docs\\getting-started\\package-comparison</code> for articles about package comparisons,<code>docs\\getting-started\\python-basics</code> for articles related to python concepts, <code>docs\\cheatsheets\\</code> for python cheatsheets ) following the article structure, including the following front matter:</li> </ul> <pre><code>---\nlayout: article\ntitle: Add article title here\ndescription: Add article description here\ntags: \n  - Add\n  - list\n  - of\n  - tags \n  - here\nimage: Add relative url to the article preview image here\ncover: Add relative url to the article icon here\ndate: Add add publishing date here\nauthor: \n   name: Add author name here\n   twitter: Add author twitter here (optional)\n---\n</code></pre> <p>Please visit this link for detailed guidance on the various types of images used with an article and instructions on their creation. </p> <p>Example front matter - </p> <pre><code>---\nlayout: article\ntitle: Django vs FastAPI vs Flask\ndescription: A comprehensive guide on choosing the right python web framework\ntags: \n  - flask\n  - django\n  - fastapi\n  - comparison \n  - web framework\nimage: /assets/images/getting-started/package-comparison-django-fastapi-flask.png\ncover: /assets/images/getting-started/django-fastapi-flask-icon.png\ndate: 2024-07-29\nauthor: \n   name: Ayush Jain\n   twitter: ayushganna\n---\n</code></pre> <ul> <li>Commit your changes: <code>git commit -m \"Brief description of your changes\"</code></li> <li>Push your branch: <code>git push origin your-branch-name</code></li> <li>Submit a pull request</li> </ul> <p>Please ensure that the front matter is included as specified above when contributing an article. Also do not make any other changes to any other file. The home page will be auto-updated after you submit your article. You can refer to previous articles and their respective front matter for examples.</p> <p>If you want to contribute by modifying an existing article, you can modify the article markdown file. Make sure you add the modifier tag to the existing front matter once you're done making your changes. </p> <pre><code>modifier: Add your name here\n</code></pre> <p>To add FAQs to an article follow the below code snippet:</p> <pre><code>??? question \"Add your question here\"\n\n    Add your answer here, make sure you indent it.\n</code></pre> <p>To add related articles to an article follow the following code snippet:</p> <pre><code>```preview\n- add\n- links \n- here\n```\n</code></pre> <p>Thanks for your contributions!</p>"},{"location":"contribute/guidelines/","title":"Contributing Guidelines","text":"<p>Here are a few essential points to consider:</p> <ul> <li> <p>Article Quality: We value high-quality content that provides value to our readers. Ensure your article is well-researched, accurate, and provides practical insights or tips.</p> </li> <li> <p>Topic Relevance: Your article should focus on trends, best practices, tutorials, or updates related to Pip, Python package management, and distribution.</p> </li> <li> <p>Original Content: Please submit only original content. Plagiarized or previously published articles will not be accepted.</p> </li> <li> <p>Formatting: Use proper formatting with headings, subheadings, and bullet points to make your article easy to read and understand.</p> </li> <li> <p>Code Snippets: If you include code snippets, ensure they are accurate, well-commented, and adhere to Python's best practices.</p> </li> <li> <p>Images and Media: If you use images or media, make sure you have the necessary rights to use them and provide appropriate credits when needed.</p> </li> <li> <p>Author Links: Include any relevant links to your personal website or social media profiles.</p> </li> </ul>"},{"location":"contribute/images/","title":"Article Image Guidelines","text":"<p>There are two main images that you'll need to create for an article. The front matter for these is -</p> <pre><code>---\nimage: Add relative url to the article preview image here\ncover: Add relative url to the article icon here\n---\n</code></pre> <p>The key tags are <code>image</code>, <code>cover</code>. Each tag serves a different purpose.</p> <ul> <li> <p><code>image</code> - This tag represents the preview image that will be visible when the article is shared on social media. Here's an example of this image. This image is also appears at the top of your article</p> <p>Dimensions - 1200x630 px</p> </li> </ul> <p> </p> <ul> <li><code>cover</code> - This tag represents the icon image that will be displayed on the homepage along with the article title and description.</li> </ul> <p>Dimensions - 800x800 px</p> <p> </p> <p>As a standard design practice at learn.piptrends.com, the <code>image</code>, and the <code>cover</code> share the same background gradient.</p>"},{"location":"courses/","title":"Coming Soon","text":""},{"location":"getting-started/","title":"Getting Started with Python and Python Packages","text":"<p>Whether you're a newcomer to Python or eager to explore the vast realm of Python packages, our guides are tailored to suit your needs. From foundational Python concepts to in-depth tutorials on popular packages spanning data science, web development, and more, we're your go-to resource for all things Python.</p> <p>Delve into our curated collection of beginner-friendly materials, gain insights from advanced topics, and explore our comprehensive package comparison articles. Our comparison guides provide detailed statistics, feature analyses, and expert reviews to help you select the ideal Python packages for your projects. Join our vibrant community for support and collaboration, and start your Python journey today. Unlock the full potential of this versatile programming language with Learn-pip-trends.</p>"},{"location":"getting-started/#package-comparisons","title":"Package Comparisons","text":"<p>Unlock the potential of Python packages with our detailed comparison guides. Explore and compare essential tools and libraries across various domains, from data analysis and machine learning to web development and automation. Our articles offer comprehensive statistics, feature comparisons, and expert insights to help you pick the best Python package for your needs. Whether you\u2019re selecting a package for a new project or evaluating options for an existing one, our resources are designed to guide you in making informed decisions and enhancing your programming endeavors.</p>"},{"location":"getting-started/#latest-articles","title":"Latest Articles","text":"Django vs FastAPI vs Flask <p>A comprehensive guide on choosing the right python web framework</p> <p> Read more \ud83d\udcc5 Jul 29, 2024 </p>"},{"location":"getting-started/#package-articles","title":"Package Articles","text":"<p>Discover the power of Python packages with our concise guides that cover essential tools and libraries for various tasks. From data analysis and machine learning to web development and automation, our articles provide step-by-step instructions on how to install, configure, and utilize popular Python packages. Whether you're a beginner looking to expand your skills or an experienced developer seeking new solutions, our resources will help you unlock the full potential of Python and enhance your programming projects.</p>"},{"location":"getting-started/#latest-articles_1","title":"Latest Articles","text":"Discord.py <p>A Simplistic approach to creating your own Discord bot using Python.</p> <p> Read more \ud83d\udcc5 Apr 04, 2023 </p> asyncio \u2014 Asynchronous I/O <p>A comprehensive guide on how to work with asyncio.</p> <p> Read more \ud83d\udcc5 Apr 01, 2024 </p> PyMySQL <p>A comprehensive guide on how to work with PyMySQL, a Python library to connect to the MySQL databases.</p> <p> Read more \ud83d\udcc5 Jan 13, 2024 </p> requests <p>A beginner's guide to Python's requests library, a powerful and user friendly tool for making HTTP requests.</p> <p> Read more \ud83d\udcc5 Jan 08, 2024 </p> matplotlib <p>Explore the power of PyPlot, a module within matplotlib, for creating dynamic and visually appealing plots in Python.</p> <p> Read more \ud83d\udcc5 Dec 18, 2023 </p>"},{"location":"getting-started/#python-basics","title":"Python Basics","text":"<p>If you're new to Python, it's essential to grasp the fundamentals. Our beginner-friendly guides cover everything from installing Python on your system to understanding basic syntax and data structures. Dive into Python programming with ease and start building your first projects.</p>"},{"location":"getting-started/#latest-articles_2","title":"Latest Articles","text":"Installing Python on Windows <p>A step-by-step guide on installing Python on Windows for beginners.</p> <p> Read more \ud83d\udcc5 Aug 01, 2023 </p> Installing Packages Using pip <p>A guide on how to install Python packages using pip, the Python package manager.</p> <p> Read more \ud83d\udcc5 Aug 01, 2023 </p>"},{"location":"getting-started/package-articles/asyncio/","title":"asyncio \u2014 Asynchronous I/O","text":"<p> Image source: https://www.newindianexpress.com/states/telangana/2021/Jun/21/toll-plaza-collections-drop-due-to-restrictions-2319243.html</p> <p>Until the car in front of us goes through the toll gate we don\u2019t get a chance to go through. If that is stuck then we are stuck. Whenever it happens I feel like I wish I had a crane so that I could lift the car and put it in a different lane which is not operating so that the queue progresses.</p> <p>Have you ever felt like that? I am guessing the answer is yes.</p> <p>This applies to many queues like queues at grocery stores or apparel stores. All these processes run synchronously. To tackle this we use threads or processes means building multiple toll gates instead of one so that we can parallelly process.</p> <p>We all love Python and we know by default our code runs synchronously.</p> <p>It doesn\u2019t mean synchronous is bad but in some cases it's bad, in some places asynchronous ways make sense.</p> <p> Image source: https://www.pinterest.com/pin/the-best-worst-menu-items-at-mcdonalds-according-to-rds--304204149807158254/</p> <p>A good example of an asynchronous way is like ordering food at a Fast Food restaurant. You can say ordering burgers at McDonald's. Here they take orders and give you a number and will say come back when we announce your number and then take the next person's order. Next person in the queue no need to wait until your order is served to you.</p> <p>Another example is when you are asking your mom to prepare biryani or pasta. Then mom will say ok go and play I will make and call you. Once done she will call you then you will eat your favorite biryani/pasta.</p> <p>Sorry for giving a lot of food examples. Your mind might have gone to the food world. Let\u2019s come back to our programming world. A great example is HTTP requests. Let\u2019s say we need to hit 5 APIs.</p> <p>In the Synchronous world, we will hit one HTTP request and wait once we get back the result we do whatever we want to do and hit the next one.</p>","tags":["asyncio","python library","Asynchronous I/O","async await","tutorial"]},{"location":"getting-started/package-articles/asyncio/#synchronous-code-example-to-hit-5-apis","title":"Synchronous code example to hit 5 APIs","text":"<p>Below code does the job. Before running it don't forget to install the requests package.</p> <pre><code>pip install requests\n</code></pre> <pre><code>import requests\nimport time\n\nurl_list = [\n   \"https://backend.piptrends.com//is-package-exists/boto3\",\n   \"https://backend.piptrends.com//is-package-exists/botocore\",\n   \"https://backend.piptrends.com//is-package-exists/urllib3\",\n   \"https://backend.piptrends.com//is-package-exists/requests\",\n   \"https://backend.piptrends.com//is-package-exists/setuptools\"\n]\n\nstart_time = time.time()\n\nfor url in url_list:\n   try:\n       response = requests.get(url)\n       if response.status_code == 200:\n           print(f\"Data from {url}: {response.json()}\")\n       else:\n           print(f\"Failed to fetch data from {url}. Status code: {response.status_code}\")\n   except requests.RequestException as e:\n       print(f\"Failed to fetch data from {url}: {e}\")\n\nend_time = time.time()\nelapsed_time = end_time - start_time\nprint(f\"Total time taken: {elapsed_time} seconds\")\n</code></pre> <p>When we run this code we get output like this <pre><code>Data from https://backend.piptrends.com//is-package-exists/boto3: {'isPackageExists': True}\nData from https://backend.piptrends.com//is-package-exists/botocore: {'isPackageExists': True}\nData from https://backend.piptrends.com//is-package-exists/urllib3: {'isPackageExists': True}\nData from https://backend.piptrends.com//is-package-exists/requests: {'isPackageExists': True}\nData from https://backend.piptrends.com//is-package-exists/setuptools: {'isPackageExists': True}\nTotal time taken: 11.119963884353638 seconds\n</code></pre></p> <p>This code kind of runs like this  Image source: https://realpython.com/python-concurrency</p> <p>We know that after hitting one URL we have no work to do. Our machine's CPU is idle and we just wait and can't do anything else so we need to wait.</p>","tags":["asyncio","python library","Asynchronous I/O","async await","tutorial"]},{"location":"getting-started/package-articles/asyncio/#asynchronous-code-example-to-hit-5-apis","title":"Asynchronous code example to hit 5 APIs","text":"<p>But in the Asynchronous world that's not the case, we will hit one HTTP request and we will say call me back once you get the response and proceed to hit the next HTTP request. Like that, we continue to hit the next APIs. When we get the response for one HTTP request we pick the task where left off for that request and process the next steps.</p> <p>This code does the job. Before running it don't forget to install the aiohttp package.</p> <pre><code>pip install aiohttp\n</code></pre> <pre><code>import asyncio\nimport aiohttp\nimport time\n\nasync def fetch_data(session, url):\n   async with session.get(url) as response:\n       return await response.json()\n\nasync def main():\n   url_list = [\n       \"https://backend.piptrends.com//is-package-exists/boto3\",\n       \"https://backend.piptrends.com//is-package-exists/botocore\",\n       \"https://backend.piptrends.com//is-package-exists/urllib3\",\n       \"https://backend.piptrends.com//is-package-exists/requests\",\n       \"https://backend.piptrends.com//is-package-exists/setuptools\"\n   ]\n\n   start_time = time.time()\n\n   async with aiohttp.ClientSession() as session:\n       tasks = [fetch_data(session, url) for url in url_list]\n       results = await asyncio.gather(*tasks)\n\n       for url, result in zip(url_list, results):\n           print(f\"Data from {url}: {result}\")\n\n   end_time = time.time()\n   elapsed_time = end_time - start_time\n   print(f\"Total time taken: {elapsed_time} seconds\")\n\nif __name__ == \"__main__\":\n   asyncio.run(main())\n</code></pre> <p>When we run this code we get output like this <pre><code>Data from https://backend.piptrends.com//is-package-exists/boto3: {'isPackageExists': True}\nData from https://backend.piptrends.com//is-package-exists/botocore: {'isPackageExists': True}\nData from https://backend.piptrends.com//is-package-exists/urllib3: {'isPackageExists': True}\nData from https://backend.piptrends.com//is-package-exists/requests: {'isPackageExists': True}\nData from https://backend.piptrends.com//is-package-exists/setuptools: {'isPackageExists': True}\nTotal time taken: 0.8289527893066406 seconds\n</code></pre></p> <p>See how fast it does the job. The above code kind of runs like this  Image source: https://realpython.com/python-concurrency</p> <p>By the way, the async, await part is not a new concept. If you are familiar with javascript you might know this concept already. This is in multiple languages.</p>","tags":["asyncio","python library","Asynchronous I/O","async await","tutorial"]},{"location":"getting-started/package-articles/asyncio/#2-myths-i-want-to-bust-first","title":"2 Myths I want to bust first.","text":"","tags":["asyncio","python library","Asynchronous I/O","async await","tutorial"]},{"location":"getting-started/package-articles/asyncio/#myth1-asyncio-is-a-kind-of-multiprocessing-or-threads","title":"Myth1: AsyncIO is a kind of multiprocessing or threads.","text":"<p>I will say no. AsyncIO is a single-threaded, single-process design: it is a cooperative multitasking. It feels like and looks like parallelism but actually not.</p>","tags":["asyncio","python library","Asynchronous I/O","async await","tutorial"]},{"location":"getting-started/package-articles/asyncio/#myth2-asyncio-is-difficult","title":"Myth2: AsyncIO Is Difficult","text":"<p>I will say they are wrong. Many people get used to Threading and multiprocessing, that's why they might be feeling like that if you understand concepts clearly then this code is less messy and less buggy. I am not saying it's easy, what I am saying is it\u2019s not difficult.</p>","tags":["asyncio","python library","Asynchronous I/O","async await","tutorial"]},{"location":"getting-started/package-articles/asyncio/#what-is-asyncio","title":"What is AsyncIO?","text":"<p>It's a module/library of Python programming. In Python, we do asynchronous programming using asyncio. AsyncIO at core level is all about managing coroutines. Before we go deep let\u2019s understand coroutine.</p> <p>Coroutines are generators and generators are simpler versions of iterators. Let me give you a simple example of a generator and then a coroutine.</p> <p>A generator function behaves like an iterator. The generator function utilizes a yield statement to return control back to the caller of the generator function.</p> <p> Image source: https://betterprogramming.pub/yield-in-python-76413d5e2a27</p> <p>Example: <pre><code>def generator():\n  yield \"a\"\n  yield \"b\"\n  yield \"c\"\n</code></pre></p> <p>You can call it like this <pre><code>for v in generator():\n     print(v)\n</code></pre></p> <p>Or you can call it like this also <pre><code>gen = generator()\nprint(next(gen))  # a\nprint(next(gen))  # b\nprint(next(gen))  # c\nprint(next(gen))  # raises StopIteration\n</code></pre> You can see that in the for loop code it works like an iterator and in the later case you can see the control the caller has. If the caller calls the next function then only it gives the next value or else it pauses and waits there like a good soldier.</p> <p>Coroutines are kind of next level to generators. We can only listen to Generators but in Coroutines case we can kind of talk to it. Here the yield keyword accepts the values the caller is giving.</p> <p>Let\u2019s see an example: <pre><code>def coroutine():\n  msg = \"default message\"\n  while True:\n      recieved_message = yield msg\n      print(recieved_message + \" received\")\n\ncoro = coroutine()\n\nprint(next(coro))  # default message\n\nresult = coro.send(\"message\") # message received\nprint(\"coroutine returned: \" + result) # coroutine returned: default message\ncoro.send(\"another message\") # another message received\n\n# coro.close() # To close coroutine\n</code></pre></p> <p>The next function takes the caller to the yield statement so it returns the message. From there onwards we use the send function to what we want to send to the coroutine. It returns whatever next to yield.</p> <p>I hope you got the idea about coroutine let's get into the main topic aysncio.</p> <p>Let\u2019s take a simple function which prints Hello World and let's make the function async. <pre><code>async def foo():\n   print(\"Hello World\")\n\nfoo()\n</code></pre></p> <p>If you run this code you will get this error. You will get error like this <pre><code>RuntimeWarning: coroutine 'foo' was never awaited\n  foo()\n</code></pre></p> <p>If you see here the moment we add an async keyword to a function python treats it as a coroutine object. If you are like me you might experiment to put next around the foo function. <pre><code>next(foo())\n</code></pre></p> <p>Then it will clearly say, boss <pre><code>TypeError: 'coroutine' object is not an iterator\n</code></pre></p> <p>If you try to print the foo function then it will give you a coroutine object reference also. Something like this <pre><code>&lt;coroutine object foo at 0x7f6bbdf465e0&gt;\n</code></pre></p> <p>To run our foo function we need to use asyncio.run() <pre><code>import asyncio\n\nasync def foo():\n   print(\"Hello World\")\n\nasyncio.run(foo())\n</code></pre></p> <p>Now you will get our Hello World.</p> <p>You might get doubts like the initial error said: \u201cnever awaited\u201d. Why didn't we use the await keyword?</p> <p>Because we are getting a coroutine object so to run it we need to use asyncio.run(). asyncio.run basically starts an event loop. The event loop is altogether a big topic. We are not covering here.</p> <p>If you use the await keyword it will give you an error by saying you can\u2019t use it outside the function. await can be used in the async function only. It is not talking about the await keyword. It's about the async function we called and asycio.run() does the job.</p> <p>Now let\u2019s write code using async &amp; await both keywords. <pre><code>import asyncio\n\nasync def foo():\n   print(\"foo function Start\")\n   await some_slow_task()\n   print(\"foo function Finish\")\n\nasync def some_slow_task():\n   print(\"Slow Function Started\")\n   await asyncio.sleep(1)\n   print(\"Slow Function Finished\")\n\nasyncio.run(foo())\n</code></pre></p> <p>Here we are creating some slow process function which takes 1 sec to finish. Instead of time.sleep() we use asyncio.sleep(). In the Async world, we need to deal with things mainly in async ways or else we don\u2019t get the benefit of asynchronous programming.</p> <p>Here we wait till the sleep is over so that the next work can be done after that. We want to call this a slow process and once that is done we will complete our program.</p> <p>Now the above code is like our usual synchronous programming only because a task took that much time at that time our CPU was free but our foo function finished waiting for that to be done. Where is the advantage of asyncio? Let me go there. <pre><code>import asyncio\n\nasync def foo():\n  print(\"foo function Start\")\n  task = asyncio.create_task(some_slow_task())\n  print(\"Another slow task at foo\")\n  await asyncio.sleep(1.1)\n  print(\"foo function Finish\")\n\nasync def some_slow_task():\n  print(\"Slow Function Started\")\n  await asyncio.sleep(1)\n  print(\"Slow Function Finished\")\n\nasyncio.run(foo())\n</code></pre></p> <p>If you run this program the whole thing is done in around 1.1 secs. But in the synchronization world, it will take 2.1 seconds. That\u2019s the power of async.</p> <p>Here we start the task which initiates it leave it there and proceed to the next task. Once that initiated task is done then it will come back and let us know it's done.</p> <p>Let\u2019s say you have a bunch of tasks then how to tackle it. Let me get there. <pre><code>import asyncio\n\nasync def print_at_quarter_sec_speed(count):\n   for index in range(count):\n       await asyncio.sleep(0.25)\n       print(f\"Quarter Sec: {index}\")\n\nasync def print_at_half_sec_speed(count):\n   for index in range(count):\n       await asyncio.sleep(0.5)\n       print(f\"Half Sec: {index}\")\n\nasync def main():\n   quarter_sec_task = asyncio.create_task(print_at_quarter_sec_speed(5))\n   half_sec_task = asyncio.create_task(print_at_half_sec_speed(5))\n   await quarter_sec_task\n   await half_sec_task\n\nif __name__ == \"__main__\":\n   import time\n   start_time = time.time()\n   asyncio.run(main())\n   end_time = time.time()\n   elapsed_time = end_time - start_time\n   print(f\"Total time taken: {elapsed_time} seconds\")\n</code></pre></p> <p>If you run this you can see that for the quarter sec function, it takes a total time of 1.25 secs and for the half sec function, it takes a total time of 2.5 secs. In the synchronous world, it is going to take 3.75 secs but in the asynchronous world, it takes 2.5 secs.</p> <p>Because first, it will run the quarter sec function it will run and knows that it needs to wait for 0.25 secs so it is free to go to the half sec function and run it. Now it knows I need to wait for 0.5 seconds so once a quarter sec function says I am done with it, it runs that and then goes to sleep that way back and forth things will be done.</p> <p>2 things I want to cover. 1. If you don\u2019t await a task then it doesn't care about it and stops the program. For example here the half sec function takes time. So if we don\u2019t await for it. Then it runs the quarter sec function and exits the program. 2. You don\u2019t create tasks like this each time then you can use async.gather(). The code will look like below.</p> <pre><code>async def main():\n   await asyncio.gather(print_at_quarter_sec_speed(5), print_at_half_sec_speed(5))\n</code></pre> <p>Cool right. If you go back to the code I showed at starting for HTTP requests you will get a better sense of the whole thing now.</p> <p>Note: If you have a rate limit issue for that you need to asyncio.Semaphore(). With that, we can put limits to it. <pre><code>import asyncio\nimport aiohttp\nimport time\n\nasync def fetch_data(semaphore, session, url):\n   async with semaphore, session.get(url) as response:\n       return await response.json()\n\nasync def main():\n  url_list = [\n      \"https://backend.piptrends.com//is-package-exists/boto3\",\n      \"https://backend.piptrends.com//is-package-exists/botocore\",\n      \"https://backend.piptrends.com//is-package-exists/urllib3\",\n      \"https://backend.piptrends.com//is-package-exists/requests\",\n      \"https://backend.piptrends.com//is-package-exists/setuptools\"\n  ]\n\n  start_time = time.time()\n\n  async with aiohttp.ClientSession() as session:\n      semaphore = asyncio.Semaphore(2)\n      tasks = [fetch_data(semaphore, session, url) for url in url_list]\n      results = await asyncio.gather(*tasks)\n\n      for url, result in zip(url_list, results):\n          print(f\"Data from {url}: {result}\")\n\n  end_time = time.time()\n  elapsed_time = end_time - start_time\n  print(f\"Total time taken: {elapsed_time} seconds\")\n\nif __name__ == \"__main__\":\n  asyncio.run(main())\n</code></pre></p> <p>I hope you got a basic idea about asyncio.</p>","tags":["asyncio","python library","Asynchronous I/O","async await","tutorial"]},{"location":"getting-started/package-articles/asyncio/#ref-links","title":"Ref links:","text":"<p>https://blog.devgenius.io/mastering-asynchronous-programming-in-python-a-comprehensive-guide-ef1e8e5b35db</p> <p>https://medium.com/@tushar_aggarwal/master-the-power-of-asyncio-a-step-by-step-guide-ac0c46719811</p> <p>https://www.youtube.com/watch?v=t5Bo1Je9EmE</p> <p>https://www.integralist.co.uk/posts/python-generators</p> <p>https://realpython.com/async-io-python/</p> <p>https://www.geeksforgeeks.org/asyncio-in-python/</p>","tags":["asyncio","python library","Asynchronous I/O","async await","tutorial"]},{"location":"getting-started/package-articles/beautifulsoup4/","title":"BeautifulSoup4","text":"","tags":["python","pip","piptrends","beautifulsoup","beautifulsoup4","bs4"]},{"location":"getting-started/package-articles/beautifulsoup4/#what-is-web-scraping","title":"What is Web Scraping?","text":"<p>We all come across webpages, and we have a generic idea of how webpages display content using different HTML tags. The process of downloading this HTML code to extract relevant information is called web scraping. Python provides various libraries to achieve this,namely Scrapy, selenium, beautifulsoup4, Today we will be looking at one of the most famous one, BeautifulSoup4.</p>","tags":["python","pip","piptrends","beautifulsoup","beautifulsoup4","bs4"]},{"location":"getting-started/package-articles/beautifulsoup4/#why-beautifulsoup","title":"Why BeautifulSoup?","text":"<p>BeautifulSoup is designed specifically for web scraping. It has a very user-friendly way to extract data from HTML files and parse XML documents. It has minimum dependencies, clean API,simple syntax, free to use and an active user community. </p>","tags":["python","pip","piptrends","beautifulsoup","beautifulsoup4","bs4"]},{"location":"getting-started/package-articles/beautifulsoup4/#history-and-trends","title":"History and Trends","text":"<p>BeautifulSoup was initially developed as a project to scrape a website, its later versions allowed XML parsing (Version 2) and CSS selector (Version 3) support. The BeautifulSoup4 was a complete rewrite of the previous verisons offering support to Python3, Unicode support and a cleaner API. The Current version(4.12.2) is well maintained and often used along with other libraries like Selenium and Pandas providing advanced web analysis and data scraping.</p>","tags":["python","pip","piptrends","beautifulsoup","beautifulsoup4","bs4"]},{"location":"getting-started/package-articles/beautifulsoup4/#getting-started","title":"Getting Started","text":"<p>Let's get started with an example, Consider an HTML document</p> <pre><code>html_doc = \"\"\"\n&lt;html&gt;\n&lt;head&gt;\n&lt;title&gt;The Rabbit's story&lt;/title&gt;\n&lt;/head&gt;\n\n&lt;body&gt;\n&lt;p class=\"title\"&gt;&lt;b&gt;The Rabbit's story&lt;/b&gt;&lt;/p&gt;\n&lt;p class=\"story\"&gt;Once upon a time there were three little rabbits; and their names were\n&lt;a href=\"http://example.com/bob\" class=\"rabbit\" id=\"link1\"&gt;Bob&lt;/a&gt;,\n&lt;a href=\"http://example.com/joe\" class=\"rabbit\" id=\"link2\"&gt;Joe&lt;/a&gt; and\n&lt;a href=\"http://example.com/jill\" class=\"rabbit\" id=\"link3\"&gt;Jill&lt;/a&gt;;\nand they lived in a burrow.&lt;/p&gt;\n\n&lt;h1&gt;&lt;a href=\"/\" class=\"continue\" id=\"link4\"&gt;The story continues ... &lt;/a&gt;&lt;/h1&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n\"\"\"\n</code></pre> <p>Before we start extracting data, let us install the library :</p> <pre><code>pip install beautifulsoup4\n</code></pre> <p>Import the beautifulsoup library : <pre><code>from bs4 import BeautifulSoup\n</code></pre></p> <p>Creating a BeautifulSoup object: <pre><code>soup = BeautifulSoup(html_doc, 'html.parser')\n</code></pre></p> <p>Now that we the bs4 object we can get started with extracting data, Here are some simple examples:</p> <pre><code>## Retrieving the title tag :\n\n&gt; soup.title\n# &lt;title&gt;The Rabbit's story&lt;/title&gt;\n\n\n## Retrieving the text from title tag : \n\n&gt; soup.title.string\n# u'The Rabbit's story'\n\n\n## Retrieving text from nested tags:\n\n&gt; soup.h1.a.string \n# The story continues...\n\n\n## Getting all the text from the html doc :\n\n&gt; print(soup.get_text())\n# The Rabbit's story\n#\n# The Rabbit's story\n#\n# Once upon a time there were three little rabbits; and their names were\n# Bob,\n# Joe and\n# Jill;\n# and they lived in a burrow.\n#\n# The story continues ...\n</code></pre>","tags":["python","pip","piptrends","beautifulsoup","beautifulsoup4","bs4"]},{"location":"getting-started/package-articles/beautifulsoup4/#beautifulsoup-methods","title":"BeautifulSoup Methods","text":"<p>A better and more recommended way to search the DOM tree is using the BeautifulSoup methods find() and find_all(), Let us get directly into working with the tags :</p> <p>find() :   Is it recommended to use find() when you know there is only one element on the page that matches your query because find() returns only the first match of your query.   If you want to extract an element which does not have an unique tag_name, you need not worry as there are certain attributes that will help you to pinpoint your required element, Let us understand this better by working with an example.</p> <pre><code>exampleHTML = \"\"\"\n&lt;html&gt;\n&lt;head&gt;\n&lt;title&gt;My First Page&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;h1&gt;This is a heading&lt;/h1&gt;\n&lt;p&gt;This is a paragraph with &lt;a href=\"https://google.com\"&gt;link&lt;/a&gt;.&lt;/p&gt;\n&lt;div id=\"element1\"&gt;This is a element&lt;/div&gt;\n&lt;div class=\"special-class\"&gt;This is a special element&lt;/div&gt;\n&lt;div class=\"normal-class\" id=\"element3\"&gt;This is a normal element&lt;/div&gt;\n&lt;ul&gt;\n  &lt;li&gt;Item 1&lt;/li&gt;\n  &lt;li&gt;Item 2&lt;/li&gt;\n  &lt;li&gt;Item 3&lt;/li&gt;\n&lt;/ul&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n\"\"\"\n\n## Creating the BeautifulSoup object :\n&gt; soup = BeautifulSoup(exampleHTML, 'html.parser')\n\n## Extracting The h1 element using find():\n&gt; heading = soup.find(\"h1\")  \n# &lt;h1&gt;This is a heading&lt;/h1&gt;\n\n## &lt;div&gt; Tag + Id :\n&gt; soup.find('div', id='element1') \n# &lt;div id=\"element1\"&gt;This is a element&lt;/div&gt;\n\n## Using attrs :\n\n&gt; soup.find('div', attrs={\"class\": \"special-class\"})\n# &lt;div class=\"special-class\"&gt;This is a special element&lt;/div&gt;\n\n&gt; soup.find('div', attrs={\"class\": \"normal-class\", \"id\": \"element3\"}).text\n# This is a normal element\n</code></pre> <p>find_all() : You should use the .find_all() method when there are multiple instances of the element on the page that matches your query. .find_all() returns an array of elements.</p> <p>Let us go through this considering the previous example : <pre><code>## Finding all &lt;li&gt;\n&gt; soup.find_all('li')\n# [ &lt;li&gt;Item 1&lt;/li&gt;\n#   &lt;li&gt;Item 2&lt;/li&gt;\n#   &lt;li&gt;Item 3&lt;/li&gt;\n# ]\n\n## &lt;div&gt; Tag + Id :\n&gt; soup.find_all('div', id='element1') \n# &lt;div id=\"element1\"&gt;This is a element&lt;/div&gt;\n\n## Using attrs :\n\n&gt; soup.find_all('div', attrs={\"class\": \"special-class\"})\n# &lt;div class=\"special-class\"&gt;This is a special element&lt;/div&gt;\n\n&gt; soup.find_all('div', attrs={\"class\": \"normal-class\", \"id\": \"element3\"}).text\n# This is a normal element\n</code></pre></p>","tags":["python","pip","piptrends","beautifulsoup","beautifulsoup4","bs4"]},{"location":"getting-started/package-articles/beautifulsoup4/#css-selectors","title":"CSS Selectors","text":"<p>BeautifulSoup also provides a .select() method to extend support for the use of CSS Selectors to extract data from a webpage. Let us look at some of the most commonly used selectors :</p> <ul> <li>.classes</li> <li> </li> <li>[attributes=value]</li> <li>parent child</li> <li>parent &gt; child</li> <li>sibling ~ sibling</li> <li>sibling + sibling</li> <li>:not(element.class, element2.class)</li> <li>:is(element.class, element2.class)</li> <li>parent:has(&gt; child)</li> </ul> <p>Select returns a list of elements similar to find_all(), the elements can be accesed by indices, for eg, use [0] for the first element to be accessed.</p>","tags":["python","pip","piptrends","beautifulsoup","beautifulsoup4","bs4"]},{"location":"getting-started/package-articles/beautifulsoup4/#ids","title":"ids","text":"","tags":["python","pip","piptrends","beautifulsoup","beautifulsoup4","bs4"]},{"location":"getting-started/package-articles/beautifulsoup4/#xml-support","title":"XML Support","text":"<p>While BeautifulSoup4 can be used for both HTML and XML parsing, there are some small differences on how it functions, We will go through them one by one :</p> <p>Creating Object :  <pre><code># For HTML parsing\nsoup = BeautifulSoup(html_content, 'html.parser')  \n\n# For XML parsing\nsoup = BeautifulSoup(xml_content, 'lxml')\n</code></pre></p> <p>Case Sensitive Tag Names and Attributes: <pre><code># For HTML\nsoup.find_all('div')  # finds &lt;div&gt;, &lt;DIV&gt;, &lt;DiV&gt;, etc.\n\n# For XML\nsoup.find_all('Element')  # only finds &lt;Element&gt;, not &lt;element&gt; or &lt;ELEMENT&gt;\n</code></pre></p> <p>Handling NameSpaces : <pre><code>\"\"\" For HTML\nHTML, traditionally does not use namespaces. \nIn HTML documents, elements and attributes are identified without namespace prefixes.\n\"\"\"\n# For XML\nsoup.find_all('ns:tag', {'ns': 'http://example.com/namespace'})\n</code></pre></p> <p>Document Structure:</p> <p>HTML is usually more forgiving when it comes to malformed tags or documents with errors. Beautiful Soup is designed to handle these imperfections commonly found in HTML. XML, on the other hand, is stricter, and documents must adhere to a well-formed structure. Beautiful Soup may not be as forgiving with poorly formed XML</p>","tags":["python","pip","piptrends","beautifulsoup","beautifulsoup4","bs4"]},{"location":"getting-started/package-articles/beautifulsoup4/#further-reading","title":"Further Reading","text":"<ul> <li>beautifulsoup4 4.12.2 Pypi</li> <li>beautifulsoup4</li> <li>TutorialsPoint - Quick guide</li> </ul>","tags":["python","pip","piptrends","beautifulsoup","beautifulsoup4","bs4"]},{"location":"getting-started/package-articles/discord/","title":"Discord.py","text":"","tags":["python","pip","discord","discord.py","discord-bot"]},{"location":"getting-started/package-articles/discord/#what-is-discordpy","title":"What is Discord.py?","text":"<p>Many of you who have clicked on this are likely familiar with Discord, but for those who aren't Discord is a free social media platform that allows users to communicate through text, voice, video, and media, It is particularly popular among gamers due to its wide range of features like low-latency voice chat, easy server creation for communities, and integrations with various gaming services. Discord offers a brand new way of bringing together a like minded community under a single server, where people can discuss, connect and share. These servers can have thousands of members, and managing them is not an easy task. Moderating such huge numbers required automation, and hence BOTs came into existence which utilized Discord API, the first BOT was Airhorn Solution 'BEEP BOOP' YES! its exactly what it did, it is a simple bot but it opened a door for millions of possibilites. Today Discord Bots can handle almost everything in the server, the admin and moderators can catch a breathe all thanks to the number of bots out there. Today we will be looking at how to create a simple discord bot, using Discord.py.</p>","tags":["python","pip","discord","discord.py","discord-bot"]},{"location":"getting-started/package-articles/discord/#background","title":"Background","text":"<p>Before we get started, It is important to clarify some points about Discord.py. While there was a period when development on discord.py was paused, it was revived shortly and is now stable. Despite this hiatus, discord.py remains the most widely used framework for creating Discord bots, other alternatives being py-cord, nextcord, hikari. You can check the comparison between these here.</p>","tags":["python","pip","discord","discord.py","discord-bot"]},{"location":"getting-started/package-articles/discord/#getting-started","title":"Getting Started","text":"<p>discord.py works with Python 3.8 or higher. Support for earlier versions of Python is not provided. Python 2.7 or lower is not supported. Python 3.7 or lower is not supported.</p> <p>Before setting up the environment and start building, there is something we need to do. Every bot in discord is recognized by a unique token. This is secret key which is essentially like the bot's password.Creating a Discord Bot account is a straightforward process : - Open Discord Developers Portal - Select Applications from the sidebar</p> <ul> <li>Click on 'New Application'</li> </ul> <ul> <li>Give a nice name for your application, and by agreeing to the terms click on Create</li> </ul> <ul> <li>Now you will be presented with what we can call the 'Home Page' of your bot</li> <li>Here you can check out different things and personalize your bot</li> <li>In the sidebar click on Bot</li> </ul> <ul> <li>You will see a reset token option, click on it, your unique bot token will be visible to you</li> </ul> <p>Now that we are all set, let us dive right into building our discord bot.</p> <p>First and foremost let us install discord.py</p> <pre><code>python3 -m pip install -U discord.py\n</code></pre> <p>To get voice support also, we should run :  <pre><code>python3 -m pip install -U discord.py[voice]\n</code></pre></p> <p>discord.py revolves around the concept of events. An event is something you listen to and then respond to.  For example, when a message happens, you will receive an event about it that you can respond to.</p> <p>We will understand better, as we build the bot. Let us begin my importing discord.py</p> <p><pre><code>import discord\nfrom dotenv import load_dotenv\n\nload_dotenv()\n</code></pre> we can store our secret token in <code>.env</code> and import and load it as above</p> <p>As mentioned above, discord revolved around listening and responding to events. These events are controlled by Intents, intents allow bot developers to subscribe to events. We can choose to enable all intents or to enable only specific intents that our bot requires. </p> <p><pre><code>client = discord.Bot(intents=discord.Intents.all())\n</code></pre> The above snippet, lets us enable all the intents, however it is adviced to enable the intents if you need them. These intents give your bot access to quite sensitive information about the users in your guild. Below is an example of enabling specific intents</p> <p><pre><code>client = discord.Bot(intents=discord.intents.members(bans=True, guilds=True))\n</code></pre> This enables the bot to know about the presence of members of the guild, the information of the banned members of the server. But in this article we shall enable all intents. For future reference you can check Discord.Intents.</p> <p>In discord commands can be executed by prefix or using slash. Back in the days adding prefix was the only way to do it, but slash commands is considered the standard today. Let us initialize <code>$</code> as the prefix to our bot. This means anything that is preceeded with a <code>$</code> sign shall be considered as a command by the bot.</p> <pre><code>client = discord.Bot(command_prefix = '$',intents=discord.Intents.all())\n</code></pre> <pre><code>@client.event\nasync def on_ready():\n    print(f'Logged in as {client.user} (ID: {client.user.id})')\n\nif __name__ == '__main__':        \n    print(\"Intializing...\")\n    Bot_Token = os.environ.get('BOT_TOKEN') # assuming you have initalized your secret token in the .env to BOT_TOKEN\n    client.run(Bot_Token)\n</code></pre> <p>The output will be:</p> <ul> <li>Intializing...</li> <li>2024-04-07 20:46:18 INFO     discord.client logging in using static token</li> <li>2024-04-07 20:46:20 INFO     discord.gateway Shard ID None has connected to Gateway (Session ID: 828d0debdd2da34092017af72b23712c).</li> <li>Logged in as PaxMax#1657 (ID: 1197219481617973258)</li> </ul> <p>We have succesfully logged into our bot. Now we can start writing various commands according to our requirements.</p> <p>Let us write a simple command that greets us whenever we call it. <pre><code>    @client.command()\n    async def hello(ctx):\n        await ctx.send(\"Hello! How are you ?\")\n</code></pre> We have defined everything, but we are missing something, To see our bot in action we have to add the bot to our server. We go back to discord developer portal, in application section after selecting our bot, Select OAuth2 in the sidebar, now scroll down and select 'bot' and 'application.commands' in the list of options available, below you can select the permissions you want the bot to have over your server, let us select administrator for now. Click on <code>COPY</code> button located at the end of the page. This will copy the URL, you can paste it in your browser and it will redirect you to an interface where you can select the server you want the bot to be added to, Click on \"Continue\" and Authorize. This will successfully add our bot to the server, now we can see it action.</p> <p>Let us call the hello command by typing $hello</p> <p>Congratulations! We have successfully run our first discord command.</p> <p>Another example is where we do not require the call the command exclusively, instead it is called when a event is triggered <pre><code>@client.event\nasync def on_message(message):\n    if message.content == 'kill':\n        await message.channel.send('Restricted Word, Please refrain from using it')\n</code></pre> This event acts as a filter that takes in message as the argument and if it is a restricted word, it issues a warning.</p>","tags":["python","pip","discord","discord.py","discord-bot"]},{"location":"getting-started/package-articles/discord/#note","title":"Note:","text":"<p>Do not share this token with anyone. Exposure of this token could lead to unauthorized access and compromise of sensitive information</p>","tags":["python","pip","discord","discord.py","discord-bot"]},{"location":"getting-started/package-articles/discord/#commands","title":"Commands","text":"<p>Commands are the building blocks of a bot, we can create as many commands as we want, based on our use case. A command must always have at least one parameter, ctx, which is the Context. There are two ways of registering a command : The first one is by using client.command() decorator. The second is using the command() decorator followed by Bot.add_command() on the instance. Example : <pre><code>@client.command()\nasync def test(ctx):\n    pass\n\n# or:\n\n@commands.command()\nasync def test(ctx):\n    pass\n\nbot.add_command(test)\n</code></pre></p>","tags":["python","pip","discord","discord.py","discord-bot"]},{"location":"getting-started/package-articles/discord/#note_1","title":"Note:","text":"<p>Any parameter that is accepted by the Command constructor can be passed into the decorator. For example, to change the name to something other than the function would be as simple as doing this <code>python @client.command(name='list') async def _list(ctx, arg):    pass</code></p>","tags":["python","pip","discord","discord.py","discord-bot"]},{"location":"getting-started/package-articles/discord/#cogs","title":"Cogs","text":"<p>As the number of commands increase, your main.py becomes huge and it becomes inefficient and ugly to manage the bot. Cogs is a concept of grouping commands with a similar concept or functioning for a common goal, for example, all the moderation commands can be grouped together, all the commands related to voice channels can be grouped together in another file. Now we will see how to define and sync commands after grouping them.</p> <p>First let us create a folder cogs and create the categories.</p> <p>Defining commands in cogs is very similar to what we were doing earlier, only difference is here we use classes.</p> <p><pre><code>#In Greetings.py\nimport discord\nfrom discord.ext import commands\n\nclass Greetings(commands.Cog):\n    def __init__(self, client):\n        self.client = client\n\n    #this is how we define a command inside cogs      \n    @commands.command()\n    async def hello(self, ctx):\n        await ctx.send(\"Hello ! How are you\")\n\n    #this is how we wait for a condition to be met for a event is triggered \n    @commands.Cog.listener()\n    async def on_member_join(self,ctx):\n        embed = discord.Embed(title = ctx.display_name,color = 0x4dff4d)\n        embed.set_thumbnail(url = ctx.avatar)\n        embed.set_image(url='https://media.giphy.com/media/v1.Y2lkPTc5MGI3NjExN284ZDdraXloczdkOTUwcTU2dGtudGttb2VscDAwbTVndTh2YTVvdCZlcD12MV9pbnRlcm5hbF9naWZfYnlfaWQmY3Q9Zw/l4FGpPki5v2Bcd6Ss/giphy-downsized-large.gif')\n        embed.add_field(name = 'Joined Server',value=f'{discord.utils.format_dt(ctx.joined_at)}',inline=True)\n        embed.add_field(name = 'Joined Discord',value=f'{discord.utils.format_dt(ctx.created_at)}',inline=True)\n        channel = self.client.get_channel(1210901142989447188)\n        await channel.send(embed = embed )\n    #The above command creates an embed whenever a new member joins the server and redirects the message to a specific channel, defined by the channel ID, you can get the channel ID by viewing the channel info\n\nasync def setup(client):\n    await client.add_cog(Greetings(client))\n#this adds the cog to the discord client\n</code></pre> By doing this we have built the foundation with cogs, Next step: registering commands in main.py</p> <p><pre><code>import discord\nfrom discord.ext import commands\nimport os\nfrom dotenv import load_dotenv\n\nload_dotenv()\nclient = commands.Bot(command_prefix = '$',intents=discord.Intents.all())\n\n@client.event\nasync def on_ready():\n    await client.change_presence(status = discord.Status.dnd, activity=discord.Game('Building!')) # You might have noticed the activity status of some bots, this is used to change it and modify it as we want.\n    await load_extensions()\n    print(\"PaxMax is functioning properly!!!\")\n    print('---------------------------------')\n    print(f\"User : {client.user} (ID : {client.user.id})\")\n\n    try :\n        synced = await client.tree.sync()\n        print(f'Synced {len(synced)} commands')\n    except Exception as e:\n        print(e)\n\nasync def load_extensions():\n    print(\"Loading extensions...\")\n    for filename in os.listdir('./cogs'):\n        if filename.endswith('.py'):\n            await client.load_extension(f'cogs.{filename[:-3]}')\n            print(f\"Loaded Cog: {filename[:-3]}\")\n        else:\n            print(\"Unable to load cog.\")\n\nif __name__ == '__main__':        \n    print(\"Initializing...\")\n    Bot_Token = os.environ.get('BOT_TOKEN')\n    client.run(Bot_Token)\n</code></pre> Congratulations!! You have successfully registered all the commands.</p> <p>By adopting cogs, you'll create well-structured, maintainable Discord bots that can scale effectively as you add more features.</p>","tags":["python","pip","discord","discord.py","discord-bot"]},{"location":"getting-started/package-articles/discord/#note_2","title":"Note:","text":"<p>your categories may differ based on your requirement, this is just defining the structure</p>","tags":["python","pip","discord","discord.py","discord-bot"]},{"location":"getting-started/package-articles/discord/#slash-commands","title":"Slash Commands","text":"<p>While cogs provide structure for traditional text commands using prefixes, discord.py version 2 introduces a new interaction paradigm: slash commands, These powerful features offer a more interactive way of interacting with our discord bot.</p> <p>What is so different about slash commands? In the traditional way we had to remember all the commands, but with slash commands a simple slash '/' is all we need. They appear directly within the Discord chat window, offering autocomplete suggestions.</p> <p>Lets us look into the following example: <pre><code>@client.tree.command(name=\"hello\")\nasync def test(interaction : discord.Interaction):\n    await interaction.response.send_message(\"How are you?\")\n</code></pre> @client.tree.command: This decorator marks the following function as a slash command. client: This refers to the Discord bot instance you created (usually named something like client). name=\"hello\": This specifies the name of the slash command, which will be displayed in the Discord interface. Users will type /hello to trigger this command.</p>","tags":["python","pip","discord","discord.py","discord-bot"]},{"location":"getting-started/package-articles/discord/#moderation","title":"Moderation","text":"<p>Maintaining a healthy environment in a server is cruicial. Discord bots can play a cruicial role for moderators, offering automated assistance with common tasks. Kick, Ban, Unban are some common moderation commands we can implement in your Discord bot using discord.py</p> <p><pre><code>import discord\nfrom discord.ext import commands\nfrom discord.ext.commands import has_permissions, MissingPermissions\n\nclass Moderation(commands.Cog):\n    def __init__(self, client):\n        self.client = client\n\n    @commands.command()\n    @has_permissions(kick_members = True)\n    async def kick(self, ctx,member: discord.Member, *, reason = None):\n        await member.kick(reason = reason)\n        await ctx.send(f'User {member} has been kicked')\n    @kick.error\n    async def kick_error(self, ctx, error):\n        if isinstance(error,commands.MissingPermissions):\n            await ctx.send(\"You do not have permissions lil homie\")\n\n    @commands.command()\n    @has_permissions(ban_members = True)\n    async def ban(self, ctx, member: discord.Member, *, reason = None):\n        await member.ban(reason = reason)\n        await ctx.send(f'User {member} has been banned')\n    @ban.error\n    async def ban_error(ctx, error):\n        if isinstance(error,commands.MissingPermissions):\n            await ctx.send(\"You do not have permissions for that lil homie\")\n\n\n    @commands.command()\n    @has_permissions(ban_members = True)\n    async def unban(self, ctx, *, member_id: int):\n        bans = [entry async for entry in ctx.guild.bans(limit=2000)]\n        for ban_entry in bans:\n            user = ban_entry.user\n            if user.id == member_id:\n                await ctx.guild.unban(user)\n                await ctx.send(f'User {user} has been unbanned.')\n                return\n            else:\n                await ctx.send(f'User with ID {member_id} is not currently banned.')\n\n    @unban.error\n    async def unban_error(self, ctx, error):\n        if isinstance(error, commands.MissingPermissions):\n            await ctx.send('You do not have permissions for that lil homie')\n\nasync def setup(client):\n    await client.add_cog(Moderation(client)) \n</code></pre> Here we have defined moderation commands to moderate the users. Kick command is used to kick a user from the server, the command first checks if the user calling this command has the authority to kick the specified user, MissingPermissions handles this. Ban command is similar to kick, but once a user is banned he cannot join back unless they are unbanned, both of these commands check the permissions of the person calling it.</p>","tags":["python","pip","discord","discord.py","discord-bot"]},{"location":"getting-started/package-articles/discord/#advanced-application","title":"Advanced Application","text":"<p>In this article we have laid the basic foundation for the discord bot, but the possibilities are endless, we can work with voice commands, various decorators, error handling, manage members. Discord.py has a very large active community to help you and has a very good documentation to help you achieve your end goal.</p>","tags":["python","pip","discord","discord.py","discord-bot"]},{"location":"getting-started/package-articles/discord/#related-articles","title":"Related Articles","text":"<ul> <li>Introduction to Discord.py</li> <li>Getting Started with examples</li> </ul>","tags":["python","pip","discord","discord.py","discord-bot"]},{"location":"getting-started/package-articles/highcharts-core/","title":"Highcharts-core","text":"","tags":["highcharts-core","charts","python","pip"]},{"location":"getting-started/package-articles/highcharts-core/#introduction","title":"Introduction","text":"<p>When we have a large amount of data and want to present it in the best visual format possible, charts and graphs are the best option. Highcharts is a popular library for charts and graphs. It is a\u00a0java script library. In Python, we have a wrapper for the same. Highcharts generates charts using SVG rendering. High charts can be used to create line charts, area charts, column and bar charts, pie charts, scatter charts, and bubble charts. Simply send the configurations you want, and the chart will be created.</p>","tags":["highcharts-core","charts","python","pip"]},{"location":"getting-started/package-articles/highcharts-core/#installation","title":"Installation","text":"<p>If you want to use the highcharts library in your project, just run below command. It will install all of the required dependencies and make it simple to use in your project. </p> <pre><code>pip install highcharts-core\n</code></pre>","tags":["highcharts-core","charts","python","pip"]},{"location":"getting-started/package-articles/highcharts-core/#basic-usage","title":"Basic Usage","text":"<p>It is simple to use once it has been installed. Here's an example of a simple line chart:</p> <pre><code>import highcharts\nchart = highcharts.Highchart()\noptions = {\n    'title': {\n        'text': 'My First Highcharts Chart'\n    },\n    'xAxis': {\n        'categories': ['Jan', 'Feb', 'Mar', 'Apr', 'May']\n    },\n    'yAxis': {\n        'title': {\n            'text': 'Value'\n        }\n    },\n    'series': [{\n        'name': 'Data Series',\n        'data': [10, 20, 15, 25, 30]\n    }]\n}\nchart.set_dict_options(options)\nchart.save_file('my_chart.html')\n</code></pre> <p>In this example, we create a basic line chart with specified x-axis categories, y-axis title, and a data series. The resulting chart is saved as an HTML file (<code>my_chart.html</code>), which can be opened in any web browser. </p>","tags":["highcharts-core","charts","python","pip"]},{"location":"getting-started/package-articles/highcharts-core/#advanced-features","title":"Advanced Features","text":"<p>This library allows you to use a wide range of Highcharts features. You can modify chart types, add annotations, implement drilldowns, and do a lot more. Highcharts by default it will show line charts</p> <p><pre><code># Advanced example with multiple series and customizations\nadvanced_chart = highcharts.Highchart()\n\nadvanced_options = {\n    'title': {\n        'text': 'Advanced Highcharts Chart'\n    },\n    'xAxis': {\n        'categories': ['Jan', 'Feb', 'Mar', 'Apr', 'May']\n    },\n    'yAxis': {\n        'title': {\n            'text': 'Values'\n        }\n    },\n    'series': [{\n        'name': 'Series 1',\n        'data': [10, 20, 15, 25, 30]\n    }, {\n        'name': 'Series 2',\n        'data': [5, 15, 10, 20, 25]\n    }],\n    'plotOptions': {\n        'column': {\n            'stacking': 'normal'\n        }\n    }\n}\nadvanced_chart.set_dict_options(advanced_options)\nadvanced_chart.save_file('advanced_chart.html')\n</code></pre> </p> <p><pre><code># Area Chart\nadvanced_area_chart = highcharts.Highchart()\n\nadvanced_area_options = {\n    'chart': {\n        'type': 'area'\n    },\n    'title': {\n        'text': 'Advanced Highcharts Area Chart'\n    },\n    'xAxis': {\n        'categories': ['Jan', 'Feb', 'Mar', 'Apr', 'May']\n    },\n    'yAxis': {\n        'title': {\n            'text': 'Values'\n        }\n    },\n    'series': [{\n        'name': 'Series 1',\n        'data': [10, 20, 15, 25, 30]\n    }, {\n        'name': 'Series 2',\n        'data': [5, 15, 10, 20, 25]\n    }],\n    'plotOptions': {\n        'column': {\n            'stacking': 'normal'\n        }\n    }\n}\nadvanced_area_chart.set_dict_options(advanced_area_options)\nadvanced_area_chart.save_file('advanced_area_chart.html')\n</code></pre> </p> <p><pre><code># Bar Chart\nadvanced_bar_chart = highcharts.Highchart()\n\nadvanced_bar_options = {\n    'chart': {\n        'type': 'bar'\n    },\n    'title': {\n        'text': 'Advanced Highcharts Bar Chart'\n    },\n    'xAxis': {\n        'categories': ['Jan', 'Feb', 'Mar', 'Apr', 'May']\n    },\n    'yAxis': {\n        'title': {\n            'text': 'Values'\n        }\n    },\n    'series': [{\n        'name': 'Series 1',\n        'data': [10, 20, 15, 25, 30]\n    }, {\n        'name': 'Series 2',\n        'data': [5, 15, 10, 20, 25]\n    }]\n}\nadvanced_bar_chart.set_dict_options(advanced_bar_options)\nadvanced_bar_chart.save_file('advanced_bar_chart.html')\n</code></pre> </p> <p><pre><code># Column Chart\nadvanced_column_chart = highcharts.Highchart()\n\nadvanced_column_options = {\n    'chart': {\n        'type': 'column'\n    },\n    'title': {\n        'text': 'Advanced Highcharts Column Chart'\n    },\n    'xAxis': {\n        'categories': ['Jan', 'Feb', 'Mar', 'Apr', 'May']\n    },\n    'yAxis': {\n        'title': {\n            'text': 'Values'\n        }\n    },\n    'series': [{\n        'name': 'Series 1',\n        'data': [10, 20, 15, 25, 30]\n    }, {\n        'name': 'Series 2',\n        'data': [5, 15, 10, 20, 25]\n    }]\n}\nadvanced_column_chart.set_dict_options(advanced_column_options)\nadvanced_column_chart.save_file('advanced_column_chart.html')\n</code></pre> </p> <p><pre><code># Column Stack Chart\nadvanced_column_stack_chart = highcharts.Highchart()\n\nadvanced_column_stack_options = {\n    'chart': {\n        'type': 'column'\n    },\n    'title': {\n        'text': 'Advanced Highcharts Column Stack Chart'\n    },\n    'xAxis': {\n        'categories': ['Jan', 'Feb', 'Mar', 'Apr', 'May']\n    },\n    'yAxis': {\n        'title': {\n            'text': 'Values'\n        }\n    },\n    'series': [{\n        'name': 'Series 1',\n        'data': [10, 20, 15, 25, 30]\n    }, {\n        'name': 'Series 2',\n        'data': [5, 15, 10, 20, 25]\n    }]\n}\nadvanced_column_stack_chart.set_dict_options(advanced_column_stack_options)\nadvanced_column_stack_chart.save_file('advanced_column_stack_chart.html')\n</code></pre> </p>","tags":["highcharts-core","charts","python","pip"]},{"location":"getting-started/package-articles/highcharts-core/#options","title":"Options","text":"<p><code>chart</code> &gt; <code>type</code> : Specifies the type of the chart eg: line, bar, area, column etc., <code>text</code>: Specifies the title of the chart. <code>xAxis</code> &gt; <code>categories</code>: Defines the categories (labels) for the X-axis. In this example, the X-axis will have categories 'Jan', 'Feb', 'Mar', 'Apr', and 'May'. <code>yAxis</code> &gt; <code>title</code>: Specifies the title of the Y-axis. <code>series</code>:This is an array of series objects. Each series object represents a set of data to be plotted on the chart. <code>name</code>: The name of the series. <code>data</code>: An array of data points for the series. <code>plotOptions</code>: Allows you to set options that are common to all plot options (series types).In this example, it is used to configure the column chart options. <code>column</code>: Specifies that the configuration is for the column chart type. <code>stacking</code>: Sets the stacking option for the column chart. In this case, it's set to 'normal', meaning the columns are stacked on top of each other.  </p>","tags":["highcharts-core","charts","python","pip"]},{"location":"getting-started/package-articles/highcharts-core/#extended-libraries","title":"Extended Libraries","text":"<p>For Stocks charts: <code>pip install highcharts-stocks</code> For Maps charts:<code>pip install highcharts-maps</code> For Gantt charts:<code>pip install highcharts-gantt</code> </p>","tags":["highcharts-core","charts","python","pip"]},{"location":"getting-started/package-articles/highcharts-core/#demo-url","title":"Demo Url","text":"<p>https://www.highcharts.com/demo</p>","tags":["highcharts-core","charts","python","pip"]},{"location":"getting-started/package-articles/matplotlib/","title":"matplotlib","text":"","tags":["matplotlib","PyPlot","Python","Data Visualization","Tutorial"]},{"location":"getting-started/package-articles/matplotlib/#data-visualization","title":"Data Visualization","text":"<p>Data visualization is the graphical representation of information and data using visual elements like charts, and graphs. Data visualization tools provide an accessible way to see and understand trends, outliers, and patterns in data. The importance of data visualization is simple: it helps people see, interact with, and better understand data.</p>","tags":["matplotlib","PyPlot","Python","Data Visualization","Tutorial"]},{"location":"getting-started/package-articles/matplotlib/#introduction-to-pyplot","title":"Introduction to PyPlot","text":"<p>matplotlib is a Python library that provides many interfaces and functionalities for 2D-graphics similar to MATLAB's in various forms. In short, you can call matplotlib as a high quality plotting library of Python.</p> <p>PyPlot is a collection of methods within matplotlib which allow user to construct 2D plots easily and interactively.</p>","tags":["matplotlib","PyPlot","Python","Data Visualization","Tutorial"]},{"location":"getting-started/package-articles/matplotlib/#installing-and-importing-matplotlib","title":"Installing and Importing matplotlib","text":"<p>To install matplotlib, simply open your terminal or command prompt and enter the following command:</p> <pre><code>pip install matplotlib\n</code></pre> <p>After successful installation, you can import matplotlib's PyPlot module into your Python script or environment:</p> <pre><code>import matplotlib.pyplot as plt\n</code></pre> <p>This allows you to access PyPlot's functionalities by using the <code>plt</code> alias, making it easier to create plots and customize visualizations.</p>","tags":["matplotlib","PyPlot","Python","Data Visualization","Tutorial"]},{"location":"getting-started/package-articles/matplotlib/#some-basics","title":"Some Basics","text":"<p>Some commonly used chart types are -</p> <ol> <li>Line Chart - A line chart shows information using dots connected by lines, useful for displaying trends over time.</li> <li>Bar Chart - A bar chart represents data with bars of different lengths, helpful for comparing values between categories.</li> <li>Pie Chart - A pie chart displays data in a circular graph, divided into slices to show how parts relate to the whole.</li> </ol>","tags":["matplotlib","PyPlot","Python","Data Visualization","Tutorial"]},{"location":"getting-started/package-articles/matplotlib/#line-chart","title":"Line Chart","text":"<p>A line chart displays information as a series of data points called markers connected by straight line segments. Line charts are particularly useful for visualizing trends and changes over continuous data sets or time intervals. For example - stock market analysis, temperature variations, sales trends, population growth, website traffic etc.</p> <p>PyPlot's plt() function is used to plot line charts. You can do this as follows:</p> <pre><code>import matplotlib.pyplot as plt\n\n# Sample data\nx_values = [1, 2, 3, 4, 5]\ny_values = [2, 4, 6, 8, 10]\n\n# Plotting the line chart\nplt.plot(x_values, y_values)\n\n# Show the plot\nplt.show()\n</code></pre> <p>This will open a new window with your plot.</p> <p> </p>","tags":["matplotlib","PyPlot","Python","Data Visualization","Tutorial"]},{"location":"getting-started/package-articles/matplotlib/#customizing-the-plot","title":"Customizing the plot","text":"<p>The full syntax of the plot() function is:</p> <pre><code>plot( &lt;x-values&gt; [, &lt;y-values&gt;] ... [, &lt;color&gt;]) [, &lt;linewidth&gt;] [, &lt;linestyle&gt;] [, &lt;marker&gt;] )\n</code></pre> <p>where</p> <ul> <li>x_values, y_values are the sequences of values representing the x and y axes respectively.</li> <li>color defines the color for the plot.</li> <li>linewidth (float) defines the width of the line.</li> <li>linestyle defines the style of the line. Options include 'solid', 'dashed', 'dotted', or 'dashdot'.</li> <li>marker: defines the marker symbol for data points on the line. Examples include 'o' for circles, 's' for squares, and 'd' for diamonds.</li> </ul>","tags":["matplotlib","PyPlot","Python","Data Visualization","Tutorial"]},{"location":"getting-started/package-articles/matplotlib/#color-code","title":"Color Code","text":"Character Color Character Color Character Color 'b' blue 'm' magenta 'c' cyan 'g' green 'y' yellow 'w' white 'r' red 'k' black <p>In addition you can also specify colors in many other ways, including full color names(e.g. \"red\", \"green\" etc.), HEX strings (\"#ABABAB\") etc.</p> <p>Note that even if you skip specifying color in the plot() function, Python will plot multiple lines in the same plot with different colors but these colors will be decided internally by Python.</p> <pre><code>import matplotlib.pyplot as plt\n\n# Data\nx = [1, 2, 3, 4, 5]\ny1 = [10, 15, 13, 18, 20]\ny2 = [2, 4, 6, 8, 10]\ny3 = [2, 3, 5, 7, 11]\ny4 = [1, 2, 3, 4, 5]\n\n# Using abbreviation 'b' for blue\nplt.plot(x, y1, color='b')\n\n# Using full name \"green\" for green\nplt.plot(x, y2, color='green')\n\n# Using HEX string \"#FF5733\" for a specific shade\nplt.plot(x, y3, color='#FF5733')\n\n# Not specifying color\nplt.plot(x, y4)\n\n# Show the plot\nplt.show()\n</code></pre> <p>Plot -</p> <p> </p>","tags":["matplotlib","PyPlot","Python","Data Visualization","Tutorial"]},{"location":"getting-started/package-articles/matplotlib/#line-width-and-line-style","title":"Line width and Line style","text":"<p>To change the Line width, you can set the <code>linewidth</code> parameter in the <code>plot()</code> function, where you have to specify the width value in float.</p> <p>Similarly for line style, you can set the <code>linestyle</code> or <code>ls</code> parameter in the <code>plot()</code> function. The available choices for linstyle are \"solid\", \"dashed\", \"dotted\" and \"dashdot\".</p> <pre><code>import matplotlib.pyplot as plt\n\n# Data\nx = [1, 2, 3, 4, 5]\ny1 = [10, 15, 13, 18, 20]\ny2 = [2, 4, 6, 8, 10]\ny3 = [2, 3, 5, 7, 11]\ny4 = [1, 2, 3, 4, 5]\n\n# Plotting with different line styles\nplt.plot(x, y1, linestyle='solid', linewidth=2.5)  # Solid line\nplt.plot(x, y2, linestyle='dashed', linewidth=3)  # Dashed line\nplt.plot(x, y3, linestyle='dotted', linewidth=1.8)  # Dotted line\nplt.plot(x, y4, linestyle='dashdot', linewidth=0.5)  # Dash-dot line\n\n# Show the plot\nplt.show()\n</code></pre> <p>Plot -</p> <p> </p>","tags":["matplotlib","PyPlot","Python","Data Visualization","Tutorial"]},{"location":"getting-started/package-articles/matplotlib/#marker-type","title":"Marker Type","text":"<p>To change the marker type, you can give the following additional arguments in the <code>plot()</code> function: <code>marker = &lt;valid marker type&gt;</code></p> Marker Description Marker Description Marker Description \".\" point \",\" pixel \"o\" circle \"v\" triangle_down \"^\" triangle_up \"&lt;\" triangle_left \"&gt;\" triangle_right \"1\" tri_down \"3\" tri_left \"4\" tri_right \"2\" tri_up \"8\" octagon \"s\" square \"p\" pentagon \"P\" plus (filled) \"*\" star \"h\" hexagon1 \"H\" hexagon2 \"+\" plus \"x\" x \"X\" x (filled) \"D\" diamond \"d\" thin_diamond \"|\" vline \"_\" hline <pre><code>import matplotlib.pyplot as plt\n\n# Data\nx = [1, 2, 3, 4, 5]\ny1 = [10, 15, 13, 18, 20]\ny2 = [2, 4, 6, 8, 10]\ny3 = [2, 3, 5, 7, 11]\ny4 = [1, 2, 3, 4, 5]\n\nplt.scatter(x, y1, marker='o')\nplt.scatter(x, y2, marker='^')\nplt.scatter(x, y3, marker='s')\nplt.scatter(x, y4, marker='d')\n\n# Show the plot\nplt.show()\n</code></pre> <p>Plot -</p> <p> </p>","tags":["matplotlib","PyPlot","Python","Data Visualization","Tutorial"]},{"location":"getting-started/package-articles/matplotlib/#bar-chart","title":"Bar Chart","text":"<p>A bar chart displays information using bars of different heights. Bar charts are commonly used for visualizing categorical data and comparing quantities among different categories. For example - sales comparison, market share analysis, population distribution, survey results, etc.</p> <p>PyPlot's bar() function is used to plot bar charts. You can do this as follows:</p> <pre><code>import matplotlib.pyplot as plt\n\n# Sample data\ncategories = ['Category A', 'Category B', 'Category C', 'Category D']\nvalues = [30, 50, 40, 60]\n\n# Creating a bar chart\nplt.bar(categories, values)\n\n# Show the plot\nplt.show()\n</code></pre> <p>This will open a new window with your plot.</p> <p> </p>","tags":["matplotlib","PyPlot","Python","Data Visualization","Tutorial"]},{"location":"getting-started/package-articles/matplotlib/#customizing-the-bars","title":"Customizing the bars","text":"<p>The full syntax of the bar() function is:</p> <pre><code>bar( &lt;x-sequence&gt;, &lt;y-sequence&gt; ... [, &lt;width&gt;]) [, &lt;color&gt;] )\n</code></pre> <p>where</p> <ul> <li>x-sequence, y-sequence are the sequences of values representing the x and y axes respectively.</li> <li>width (float/sequence) defines the width of the bars.</li> <li>color (single/sequence): defines the color of the bars.</li> </ul>","tags":["matplotlib","PyPlot","Python","Data Visualization","Tutorial"]},{"location":"getting-started/package-articles/matplotlib/#width","title":"Width","text":"<p>You can either specify different width(other than the default) for all bars, or you can specify different widths for different bars of the bar chart using the <code>width</code> argument. For same width for all bars, you can specify a point value as the value for the <code>width</code> argument or for different widths you can specify a sequence value as the value for the <code>width</code> argument.</p> <p>Same Width -</p> <pre><code>import matplotlib.pyplot as plt\n\n# Sample data\ncategories = ['Category A', 'Category B', 'Category C', 'Category D']\nvalues = [30, 50, 40, 60]\n\n# Creating a bar chart\nplt.bar(categories, values, width = 0.3)\n\n# Show the plot\nplt.show()\n</code></pre> <p>Chart -</p> <p> </p> <p>Different Widths -</p> <pre><code>import matplotlib.pyplot as plt\n\n# Sample data\ncategories = ['Category A', 'Category B', 'Category C', 'Category D']\nvalues = [30, 50, 40, 60]\nwidth = [0.5, 0.6, 0.7, 0.8]\n\n# Creating a bar chart\nplt.bar(categories, values, width = width)\n\n# Show the plot\nplt.show()\n</code></pre> <p>Chart -</p> <p> </p>","tags":["matplotlib","PyPlot","Python","Data Visualization","Tutorial"]},{"location":"getting-started/package-articles/matplotlib/#color","title":"Color","text":"<p>Similar to the <code>width</code> argument, you can also specify the <code>color</code> argument for the bars.</p> <p>Same Color -</p> <pre><code>import matplotlib.pyplot as plt\n\n# Sample data\ncategories = ['Category A', 'Category B', 'Category C', 'Category D']\nvalues = [30, 50, 40, 60]\n\n# Creating a bar chart\nplt.bar(categories, values, color = \"g\")\n\n# Show the plot\nplt.show()\n</code></pre> <p>Chart -</p> <p> </p> <p>Different Colors -</p> <pre><code>import matplotlib.pyplot as plt\n\n# Sample data\ncategories = ['Category A', 'Category B', 'Category C', 'Category D']\nvalues = [30, 50, 40, 60]\ncolors = [\"r\", \"yellow\", \"#abcd90\", \"black\"]\n\n# Creating a bar chart\nplt.bar(categories, values, color = colors)\n\n# Show the plot\nplt.show()\n</code></pre> <p>Chart -</p> <p> </p>","tags":["matplotlib","PyPlot","Python","Data Visualization","Tutorial"]},{"location":"getting-started/package-articles/matplotlib/#multiple-bar-charts","title":"Multiple Bar Charts","text":"<p>Creating multiple bar charts in the same figure allows for easy comparison between different datasets across the same categories or groups. This can be achieved by adjusting the positions of the bars for each dataset.</p> <pre><code>import matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data for two sets of bars\ncategories = ['Category A', 'Category B', 'Category C', 'Category D']\nvalues_set1 = [30, 50, 40, 60]\nvalues_set2 = [45, 55, 35, 75]\n\n# Set the width of the bars and the positions\nbar_width = 0.35\nbar_positions_set1 = np.arange(len(categories))\nbar_positions_set2 = [x + bar_width for x in bar_positions_set1]\n\n# Creating the bar charts\nplt.bar(bar_positions_set1, values_set1, width=bar_width, color='skyblue')\nplt.bar(bar_positions_set2, values_set2, width=bar_width, color='salmon')\n\n# Show the plot\nplt.show()\n</code></pre> <p>In the above code snippet <code>bar_positions_set1</code> and <code>bar_positions_set2</code> define the positions of the bars for the two datasets, ensuring they are displayed side by side.</p> <p>Chart -</p> <p> </p> <p>You can also add labels and titles to this chart to make it more informative. We'll discuss about these in detail in the Labels and Titles Section</p> <pre><code># Adding labels and title\nplt.xlabel('Categories')\nplt.ylabel('Values')\nplt.title('Comparison of Two Sets of Values by Category')\nplt.xticks([x + bar_width / 2 for x in bar_positions_set1], categories)\nplt.legend()\n</code></pre> <p>Chart -</p> <p> </p>","tags":["matplotlib","PyPlot","Python","Data Visualization","Tutorial"]},{"location":"getting-started/package-articles/matplotlib/#horizontal-bar-charts","title":"Horizontal Bar Charts","text":"<p>Use the <code>plt.barh()</code> function to create a horizontal bar chart by passing the <code>categories</code> as the y-axis and <code>values</code> as the corresponding width of the bars along the x-axis. Adjust the labels, colors, and other parameters just like you would with a normal bar chart using the <code>plt.bar()</code> function.</p> <pre><code>import matplotlib.pyplot as plt\n\n# Sample data\ncategories = ['Category A', 'Category B', 'Category C', 'Category D']\nvalues = [30, 50, 40, 60]\n\n# Creating a horizontal bar chart\nplt.barh(categories, values, color='skyblue')\n\n# Show the plot\nplt.show()\n</code></pre> <p>Chart -</p> <p> </p>","tags":["matplotlib","PyPlot","Python","Data Visualization","Tutorial"]},{"location":"getting-started/package-articles/matplotlib/#pie-chart","title":"Pie Chart","text":"<p>A pie chart divides a circle into slices to illustrate numerical proportions. Each slice represents a portion of the whole, with the size of each slice proportional to the quantity it represents. Pie charts are useful for displaying relative proportions or percentages of a whole. For example - market share analysis, population distribution, survey results, etc.</p> <p>PyPlot's pie() function is used to plot pie charts. You can use this as follows:</p> <pre><code>import matplotlib.pyplot as plt\n\n# Sample data\ncontribution = [17, 8.8, 12.75, 14]\n\n# Creating a pie chart\nplt.pie(contribution)\n\n# Show the plot\nplt.show()\n</code></pre> <p>This will open a new window with your plot.</p> <p> </p>","tags":["matplotlib","PyPlot","Python","Data Visualization","Tutorial"]},{"location":"getting-started/package-articles/matplotlib/#customizing-the-chart","title":"Customizing the chart","text":"<p>The full syntax of the pie() function is:</p> <pre><code>pie( &lt;contribution-sequence&gt; ... [, &lt;labels&gt;] [, &lt;autopct&gt;] [, &lt;colors&gt;] [, &lt;explode&gt;])\n</code></pre> <p>where</p> <ul> <li>contribution-sequence are the sequences of values representing the contribution of each category to the whole.</li> <li>labels (sequence) defines the labels of the pies.</li> <li>autopct (format string): defines the format in which the percentage share of each category is added on the pie.</li> <li>colors (sequence): defines the colors of the pies.</li> <li>explode (sequence): defines the distance of the pie from the center to emphasize on more slice more than the other.</li> </ul>","tags":["matplotlib","PyPlot","Python","Data Visualization","Tutorial"]},{"location":"getting-started/package-articles/matplotlib/#adding-labels-of-slices","title":"Adding Labels of Slices","text":"<p>The above plot is incomplete as it makes it difficult to make out which slice belongs to what. You can pass the sequence of labels as a value to tha <code>labels</code> argument of the <code>pie()</code> function.</p> <pre><code>import matplotlib.pyplot as plt\n\n# Sample data\nlabels = ['Category A', 'Category B', 'Category C', 'Category D']\nsizes = [30, 20, 25, 25]  # Values for each category\n\n# Creating a pie chart\nplt.pie(sizes, labels=labels)\n\n# Show the plot\nplt.show()\n</code></pre> <p>Chart -</p> <p> </p>","tags":["matplotlib","PyPlot","Python","Data Visualization","Tutorial"]},{"location":"getting-started/package-articles/matplotlib/#adding-formatted-slice-percentages","title":"Adding Formatted Slice Percentages","text":"<p>To view the percentage share in a pie chart, you need to add an argument <code>autopct</code> with a format string such as <code>\"%1.1F%%\"</code>. It will show the percent share of each slice to the whole, formatted in a certain way.</p> <p>The percentage of each value plotted is calculated as:</p> <p>$$ \\frac{single value}{sum of all values} \\times  100 $$</p> <p>The format string used with <code>autopct</code> will determine the format of the percentage being displayed. The format string begins with the \"%\" operator, which specifies the format of the percentage value being displayed. The general syntax for a format placeholder is</p> <pre><code>[flags][width][.precision]type\n</code></pre> <ul> <li>%: The percentage symbol is a special character that signifies that this string is a format specifier.</li> <li>flags: Optional flags that can modify the formatting. For example, adding a + flag displays both positive and negative numbers with a sign. The most useful flag is 0, which wien specified will pad tha value being displayed woth preceeding zeroes if the digits of the value is less than the width.</li> <li>width: Specifies the minimum width of the formatted string. It defines the minimum number of characters used to display the percentage.</li> <li>.: Separates the precision from the width. It indicates the number of digits to display after the decimal point.</li> <li>precision: Specifies the number of decimal places to display for the percentage.</li> <li>type: Represents the data type being formatted. For percentages, it is often f for float.</li> <li>%%: When you include %% in a format string, it serves as an escape sequence for the percentage symbol %. It doesn't represent any data to format; instead, it's used to display a literal percentage sign.</li> </ul> <p>Format strings examples -</p> Format String Parameters Description \"%5d\", \"%5i\" width = 5, type = d or i (integer type) Print the value with 5 characters. If the value being printed is less than 5 characters, it will be padded with leading blanks. \"%05d\", \"%05i\" flag = 0, width = 5, type = d or i (integer type) With the flag being set to 0, the value will now be printed with leading zeroes(0) instead of blank spaces. \"%5d%%\", \"%5i%%\" width = 5, type = d or i (integer type), percentage sign in the end Adds a % sign to the end of the format string. \"%05.2f%%\", \"%05.2F%%\" flag = 0, width = 5, type = f or F (float type), precision = 2, percentage sign in the end The precision parameter, sets the number of characters that will be displayed after the decimal point. Here, .2 indicates that two decimal places should be shown. <p>Here's how you can use the autopct parameter -</p> <pre><code>import matplotlib.pyplot as plt\n\n# Sample data\nlabels = ['Category A', 'Category B', 'Category C', 'Category D']\nsizes = [30, 20, 25, 25]  # Values for each category\n\n# Creating a pie chart\nplt.pie(sizes, labels=labels, autopct='%06.2f%%')\n\n# Show the plot\nplt.show()\n</code></pre> <p>Chart -</p> <p> </p>","tags":["matplotlib","PyPlot","Python","Data Visualization","Tutorial"]},{"location":"getting-started/package-articles/matplotlib/#adding-colors-to-teh-slices","title":"Adding colors to teh slices","text":"<p>You can define different colors to the slices using the <code>colors</code> parameter.</p> <pre><code>import matplotlib.pyplot as plt\n\n# Sample data\nlabels = ['Category A', 'Category B', 'Category C', 'Category D']\nsizes = [30, 20, 25, 25]  # Values for each category\ncolors = ['skyblue', 'salmon', 'lightgreen', 'gold']\n\n# Creating a pie chart\nplt.pie(sizes, labels=labels, colors=colors)\n\n# Show the plot\nplt.show()\n</code></pre> <p>Chart -</p> <p> </p>","tags":["matplotlib","PyPlot","Python","Data Visualization","Tutorial"]},{"location":"getting-started/package-articles/matplotlib/#exploding-a-slice","title":"Exploding a slice","text":"<p>When you want to emphasize on one or more slices and show them little pulled out, you can use the <code>explode</code> parameter of the <code>pie()</code> function</p> <pre><code>import matplotlib.pyplot as plt\n\n# Sample data\nlabels = ['Category A', 'Category B', 'Category C', 'Category D']\nsizes = [30, 20, 25, 25]  # Values for each category\ncolors = ['skyblue', 'salmon', 'lightgreen', 'gold']\nexplode = (0, 0.1, 0, 0)\n\n# Creating a pie chart\nplt.pie(sizes, labels=labels, colors=colors, explode=explode, autopct=\"%06.2f\")\n\n# Show the plot\nplt.show()\n</code></pre> <p>Chart -</p> <p> </p>","tags":["matplotlib","PyPlot","Python","Data Visualization","Tutorial"]},{"location":"getting-started/package-articles/matplotlib/#customizing-the-plot_1","title":"Customizing the Plot","text":"<p>Data Visualization demands much more from a graph/plot. The graph or plot should have a proper title, X and Y limits defined, labels, legends etc. All this makes understanding the plot and taking the decisions easier.</p>","tags":["matplotlib","PyPlot","Python","Data Visualization","Tutorial"]},{"location":"getting-started/package-articles/matplotlib/#adding-a-title","title":"Adding a title","text":"<p>To add a title to your plot, you can use the <code>title()</code> function. The general syntax of the function is</p> <pre><code>&lt;matplotlib.pyplot&gt;.title(&lt;title string&gt;)\n</code></pre> <p>Example -</p> <pre><code>import matplotlib.pyplot as plt\n\n# Sample data\nlabels = ['Category A', 'Category B', 'Category C', 'Category D']\nsizes = [30, 20, 25, 25]  # Values for each category\ncolors = ['skyblue', 'salmon', 'lightgreen', 'gold']\nexplode = (0, 0.1, 0, 0)\n\n# Creating a pie chart\nplt.pie(sizes, labels=labels, colors=colors, explode=explode, autopct=\"%06.2f\")\n\n# Adding a title\nplt.title(\"Pie Chart with different colors.\")\n\n# Show the plot\nplt.show()\n</code></pre> <p>Chart -</p> <p> </p>","tags":["matplotlib","PyPlot","Python","Data Visualization","Tutorial"]},{"location":"getting-started/package-articles/matplotlib/#setting-x-and-y-axes-labels","title":"Setting X and Y Axes Labels","text":"<p>To add x and y labels to a plot, you can use the <code>xlabel()</code> and <code>ylabel()</code> functions. The general syntax for these functions is -</p> <pre><code>&lt;matplotlib.pyplot&gt;.xlabel(&lt;X axis label string&gt;)\n&lt;matplotlib.pyplot&gt;.ylabel(&lt;Y axis label string&gt;)\n</code></pre> <p>Example -</p> <pre><code>import matplotlib.pyplot as plt\n\n# Sample data\ncategories = ['Category A', 'Category B', 'Category C', 'Category D']\nvalues = [30, 20, 25, 35]  # Values for each category\n\n# Creating a bar chart\nplt.bar(categories, values)\n\n# Adding x and y labels\nplt.xlabel('Categories')\nplt.ylabel('Values')\n\n# Adding title\nplt.title('Bar Chart with X and Y Labels')\n\n# Show the plot\nplt.show()\n</code></pre> <p>Chart -</p> <p> </p>","tags":["matplotlib","PyPlot","Python","Data Visualization","Tutorial"]},{"location":"getting-started/package-articles/matplotlib/#setting-x-and-y-axes-limits","title":"Setting X and Y Axes limits","text":"<p>PyPlot automatically picks the best fitting range for X and Y axes by default. But, to have your own limits specified for X and Y axes, t=you can use the <code>xlim()</code> and <code>ylim()</code> functions. The general syntax of these functions is:</p> <pre><code>&lt;matplotlib.pyplot&gt;.xlim(&lt;xmin&gt;, &lt;xmax&gt;)\n&lt;matplotlib.pyplot&gt;.ylim(&lt;ymin&gt;, &lt;ymax&gt;)\n</code></pre> <p>Example -</p> <pre><code>import matplotlib.pyplot as plt\n\n# Sample data\nx_values = [1, 2, 3, 4, 5]\ny_values = [2, 4, 6, 8, 10]\n\n# Creating a line chart\nplt.plot(x_values, y_values)\n\n# Adding x and y labels\nplt.xlabel('X Axis')\nplt.ylabel('Y Axis')\n\n# Adding title\nplt.title('Line Chart with X and Y Limits')\n\n# Setting x and y limits\nplt.xlim(1, 5)  # X-axis limits from 1 to 5\nplt.ylim(0, 12)  # Y-axis limits from 0 to 12\n\n# Show the plot\nplt.show()\n</code></pre> <p>Chart-</p> <p> </p>","tags":["matplotlib","PyPlot","Python","Data Visualization","Tutorial"]},{"location":"getting-started/package-articles/matplotlib/#setting-x-and-y-axes-ticks","title":"Setting X and Y Axes Ticks","text":"<p>Similar to the limits, PyPlot automatically decides the data points that will have ticks on the axes, but to assign your own data points will have tick marks on X and Y axes using the <code>xticks()</code> and <code>yticks()</code> functions.</p> <p>The general syntax of these functions is:</p> <pre><code>&lt;matplotlib.pyplot&gt;.xticks(&lt;tick data points sequence&gt;, &lt;tick labels sequence&gt;)\n&lt;matplotlib.pyplot&gt;.yticks(&lt;tick data points sequence&gt;, &lt;tick labels sequence&gt;)\n</code></pre> <p>Example -</p> <pre><code>import matplotlib.pyplot as plt\n\n# Sample data\ncategories = ['A', 'B', 'C', 'D']\nvalues = [30, 20, 25, 35]  # Values for each category\n\n# Creating a bar chart\nplt.bar(categories, values)\n\n# Adding x and y ticks with labels\nplt.xticks(range(len(categories)), categories, rotation=45)  # X-axis ticks with labels\nplt.yticks(values)  # Y-axis ticks with labels\n\n# Adding x and y labels\nplt.xlabel('Categories')\nplt.ylabel('Values')\n\n# Adding title\nplt.title('Bar Chart with Custom X and Y Ticks')\n\n# Show the plot\nplt.show()\n</code></pre> <p>Chart-</p> <p> </p>","tags":["matplotlib","PyPlot","Python","Data Visualization","Tutorial"]},{"location":"getting-started/package-articles/matplotlib/#adding-legends","title":"Adding legends","text":"<p>To add legends to a line chart with multiple lines representing different data series, you can use the <code>legend()</code> function in PyPlot. Make sure, you specify the <code>label</code> argument in your plotting function.</p> <p>The general syntax of the <code>legend()</code> function is:</p> <pre><code>&lt;matplotlib.pyplot&gt;.legends(loc = &lt;position number or strings&gt;)\n</code></pre> <p>Example -</p> <pre><code>import matplotlib.pyplot as plt\n\n# Sample data\nx_values = [1, 2, 3, 4, 5]\ny1_values = [2, 4, 6, 8, 10]\ny2_values = [1, 3, 5, 7, 9]\n\n# Creating a line chart with multiple lines\nplt.plot(x_values, y1_values, label='Line 1')\nplt.plot(x_values, y2_values, label='Line 2')\n\n# Adding x and y labels\nplt.xlabel('X Axis')\nplt.ylabel('Y Axis')\n\n# Adding title\nplt.title('Line Chart with Legends')\n\n# Adding legends\nplt.legend()\n\n# Show the plot\nplt.show()\n</code></pre> <p>Chart-</p> <p> </p> <p>You can use the <code>loc</code> argument to specify the location of the legends in your chart.</p> <pre><code>import matplotlib.pyplot as plt\nimport numpy as np\n\n# Sample data\ncategories = ['Category A', 'Category B', 'Category C', 'Category D']\nvalues_1 = [30, 20, 25, 35]  # Values for bar chart 1\nvalues_2 = [25, 15, 20, 30]  # Values for bar chart 2\n\nbar_width = 0.35  # Width of each bar\nx = np.arange(len(categories))  # x locations for the groups\n\n# Creating multiple bar charts\nplt.bar(x, values_1, width=bar_width, label='Bar Chart 1')\nplt.bar(x + bar_width, values_2, width=bar_width, label='Bar Chart 2')\n\n# Adding x and y labels\nplt.xlabel('Categories')\nplt.ylabel('Values')\n\n# Adding title\nplt.title('Multiple Bar Charts with Legends')\n\n# Adding legends with loc parameter for placement\nplt.legend(loc='upper right')\n\n# Setting x-axis ticks positions\nplt.xticks(x + bar_width / 2, categories)\n\n# Show the plot\nplt.show()\n</code></pre> <p>Chart -</p> <p> </p>","tags":["matplotlib","PyPlot","Python","Data Visualization","Tutorial"]},{"location":"getting-started/package-articles/matplotlib/#saving-a-figure","title":"Saving a figure","text":"<p>You can save your plot using the <code>savefig()</code> function. You can save them in popular formats like .png, .jpg, pdf, etc.</p> <p>The general syntax of the <code>savefig()</code> function is -</p> <pre><code>&lt;matplotlib.pyplot&gt;.savefig(&lt;string with path and filename and extension&gt;)\n</code></pre> <p>Example -</p> <pre><code>plt.savefig(\"filename.png\")\nplt.savefig(\"filename.pdf\")\n</code></pre>","tags":["matplotlib","PyPlot","Python","Data Visualization","Tutorial"]},{"location":"getting-started/package-articles/matplotlib/#project-ideas","title":"Project Ideas","text":"<p>Some project ideas to get started with PyPlot are -</p> <ul> <li>Financial Data Analysis: Create visualizations for stock market data, including stock price movements, trading volumes, and comparative analysis of multiple stocks.</li> <li>Weather Data Visualization: Develop visualizations for weather patterns, such as temperature trends, rainfall distribution, or climate change analysis using historical weather data.</li> <li>Social Media Analytics: Analyze and visualize social media trends, user engagement, sentiment analysis, or network graphs using data collected from social media platforms.</li> </ul> <p>In this article, we covered the basics of Data Visualization with PyPlot. We explored Line Charts, Bar Charts, and Pie CHarts in detail. We also discusses the anatomy of a chart and how to save these figures. Armed with this newfound knowledge, learners can use PyPlot and add Data Visualization features to their projects.</p>","tags":["matplotlib","PyPlot","Python","Data Visualization","Tutorial"]},{"location":"getting-started/package-articles/matplotlib/#useful-links","title":"Useful Links","text":"<ul> <li>pypi - matpotlib</li> <li>matplotlib Documentation</li> <li>What Is PyPlot In Matplotlib?</li> <li>weschools - PyPlot Tutorial</li> </ul>","tags":["matplotlib","PyPlot","Python","Data Visualization","Tutorial"]},{"location":"getting-started/package-articles/pymysql/","title":"PyMySQL","text":"","tags":["PyMySQL","MySQL","SQL","Tutorial"]},{"location":"getting-started/package-articles/pymysql/#introduction","title":"Introduction","text":"<p>MySQLis an open-source database system that uses SQL (Structured Query Language) for managing data. It's popular for both small and large projects.</p> <p>PyMySQL is a Python library for connecting to a MySQL database. It's written in Python, easy to use, and works with Python 2.7 and 3.x versions. PyMySQL is favored because it's simple, doesn't need extra software, and supports secure SSL connections. This makes it a great choice for Python applications needing to work with databases.</p>","tags":["PyMySQL","MySQL","SQL","Tutorial"]},{"location":"getting-started/package-articles/pymysql/#installing-pymysql","title":"Installing PyMySQL","text":"<p>To install PyMySQL, simply open your terminal or command prompt and enter the following command:</p> <p><pre><code>pip install pymysql\n</code></pre> Once the installation process is complete, you'll be all set to harness the capabilities of Python-docx in your projects. So go ahead and execute the command, and let's get started with the exciting world of working with Word documents using Python!</p>","tags":["PyMySQL","MySQL","SQL","Tutorial"]},{"location":"getting-started/package-articles/pymysql/#connecting-with-mysql","title":"Connecting with MySQL","text":"<p>Use pymysql.connect() to establish a connection to your MySQL database. You'll need to provide details such as the hostname (or IP address), database username, password, and the database name you wish to connect to.</p> <pre><code>import pymysql\nconnection = pymysql.connect(host='your_host',\n                             user='your_username',\n                             password='your_password',\n                             database='your_database')\n</code></pre> <p>In case you do not want to specify the database name while creating the connection object, you can use the <code>select_db</code> method of the connection object to select the database.</p> <pre><code>import pymysql\nconnection = pymysql.connect(host='your_host',\n                             user='your_username',\n                             password='your_password')\nconnection.select_db('your_database')\n</code></pre>","tags":["PyMySQL","MySQL","SQL","Tutorial"]},{"location":"getting-started/package-articles/pymysql/#understanding-the-cursor-object","title":"Understanding the cursor object","text":"<p>In PyMySQL, the <code>cursor</code> object is a crucial component when working with databases. It represents a pointer or handle to the result set of a query that is executed on the database. The cursor object allows you to interact with the database, fetch rows, execute queries, and manage transactions.</p>","tags":["PyMySQL","MySQL","SQL","Tutorial"]},{"location":"getting-started/package-articles/pymysql/#creating-a-cursor-object","title":"Creating a cursor object","text":"<p>To create a cursor, use the <code>cursor</code> method of the connection object:</p> <pre><code>cursor = connection.cursor()\n</code></pre> <p>With the code above, we are now all set to execute queries and fetch results from MySQL.</p>","tags":["PyMySQL","MySQL","SQL","Tutorial"]},{"location":"getting-started/package-articles/pymysql/#executing-queries","title":"Executing Queries","text":"<p>To execute a query, we use the <code>execute</code> method of the cursor object.</p> <pre><code>cursor.execute('Your Query')\n</code></pre> <p>Let's take an example. Assume you want to perform the below operations using PyMySQL.</p> <pre><code>USE testdb;\nDROP TABLE IF EXISTS countries;\nCREATE TABLE countries(\n    id INT PRIMARY KEY AUTO_INCREMENT, \n    country_name VARCHAR(255), \n    capital VARCHAR(255), \n    capital_population INT\n);\n\nINSERT INTO countries(country_name, capital, capital_population) VALUES('Slovakia', 'Bratislava', 432000);\nINSERT INTO countries(country_name, capital, capital_population) VALUES('Hungary', 'Budapest', 1759000);\nINSERT INTO countries(country_name, capital, capital_population) VALUES('Czech Republic', 'Prague', 1280000);\nINSERT INTO countries(country_name, capital, capital_population) VALUES('Poland', 'Warsaw', 1748000);\nINSERT INTO countries(country_name, capital, capital_population) VALUES('United States', 'Washington, D.C.', 705749);\nINSERT INTO countries(country_name, capital, capital_population) VALUES('Germany', 'Berlin', 3671000);\nINSERT INTO countries(country_name, capital, capital_population) VALUES('United Kingdom', 'London', 8982000);\nINSERT INTO countries(country_name, capital, capital_population) VALUES('France', 'Paris', 2161000);\nINSERT INTO countries(country_name, capital, capital_population) VALUES('India', 'New Delhi', 29399141);\n</code></pre> <p>Here's how you can perform the above operations using PyMySQL:</p> <p><pre><code># Select test_db\nconnection.select_db('testdb')\n\n# Create table countries\ncreate_table_command = \"\"\"\nDROP TABLE IF EXISTS countries;\nCREATE TABLE countries(\n    id INT PRIMARY KEY AUTO_INCREMENT, \n    country_name VARCHAR(255), \n    capital VARCHAR(255), \n    capital_population INT\n);\n\"\"\"\ncursor.execute(create_table_command)\n\n# List of values to insert into the table\ncountries_data = [\n    ('Slovakia', 'Bratislava', 432000),\n    ('Hungary', 'Budapest', 1759000),\n    ('Czech Republic', 'Prague', 1280000),\n    ('Poland', 'Warsaw', 1748000),\n    ('United States', 'Washington, D.C.', 705749),\n    ('Germany', 'Berlin', 3671000),\n    ('United Kingdom', 'London', 8982000),\n    ('France', 'Paris', 2161000),\n    ('India', 'New Delhi', 29399141)\n]\n\n# Insert into table\ninsert_command = \"INSERT INTO countries (country_name, capital, capital_population) VALUES (%s, %s, %s)\"\nfor country in countries_data:\n    cursor.execute(insert_command, country)\n\n# Commit the changes to the database\nconnection.commit()\n</code></pre> As you can see it's fairly simple to perform operations on the database using PyMySQL. Notice the <code>connection.commit()</code> line, in PyMySQL, <code>connection.commit()</code> is used to commit the current transaction. All the changes made by the SQL statements in the transaction become visible to other database connections after a commit is executed. If you don't explicitly call <code>connection.commit()</code>, the changes you made during the transaction will not be saved to the database. This is particularly important for operations that modify data, like <code>INSERT</code>, <code>UPDATE</code>, or <code>DELETE</code> statements.</p>","tags":["PyMySQL","MySQL","SQL","Tutorial"]},{"location":"getting-started/package-articles/pymysql/#fetching-results","title":"Fetching results","text":"<p>Another use of the cursor object is to fetch results from the database. </p> <p>To fetch results from a table using PyMySQL, you can utilize different methods provided by the cursor object. Each method serves a specific purpose in retrieving data. Here's how you can use them:</p> <ul> <li> <p><code>fetchone()</code>: This method retrieves the next row of a query result set and returns a single sequence(tuple), or None when no more data is available.</p> </li> <li> <p><code>fetchall()</code>: This method fetches all (remaining) rows of a query result, returning them as a tuple of tuples. This can be memory-intensive if the result set is large.</p> </li> <li> <p><code>fetchmany(size)</code>: This method fetches the next set of rows of a query result, returning a tuple of tuples. size specifies the number of rows to fetch.</p> </li> </ul> <p>Here's an example Python script demonstrating these methods:</p> <ul> <li> <p><code>fetchone()</code> <pre><code>cursor.execute(\"SELECT * FROM countries\")\n\n# Fetch one row using fetchone()\nprint(\"Fetch one row:\")\nrow = cursor.fetchone()\nwhile row is not None:\n    print(row)\n    row = cursor.fetchone()\n</code></pre></p> <p>Output:</p> <p><pre><code>Fetch one row:\n(1, 'Slovakia', 'Bratislava', 432000)\n(2, 'Hungary', 'Budapest', 1759000)\n(3, 'Czech Republic', 'Prague', 1280000)\n(4, 'Poland', 'Warsaw', 1748000)\n(5, 'United States', 'Washington, D.C.', 705749)\n(6, 'Germany', 'Berlin', 3671000)\n(7, 'United Kingdom', 'London', 8982000)\n(8, 'France', 'Paris', 2161000)\n(9, 'India', 'New Delhi', 29399141)\n</code></pre> - <code>fetchall()</code></p> <pre><code># Re-execute the query to reset the cursor position\ncursor.execute(\"SELECT * FROM countries\")\n\n# Fetch all rows using fetchall()\nprint(\"Fetch all rows:\")\nrows = cursor.fetchall()\nfor row in rows:\n    print(row)\n</code></pre> <p>Output: <pre><code>Fetch all rows:\n(1, 'Slovakia', 'Bratislava', 432000)\n(2, 'Hungary', 'Budapest', 1759000)\n(3, 'Czech Republic', 'Prague', 1280000)\n(4, 'Poland', 'Warsaw', 1748000)\n(5, 'United States', 'Washington, D.C.', 705749)\n(6, 'Germany', 'Berlin', 3671000)\n(7, 'United Kingdom', 'London', 8982000)\n(8, 'France', 'Paris', 2161000)\n(9, 'India', 'New Delhi', 29399141)\n</code></pre></p> </li> <li> <p><code>fetchmany(size)</code></p> <pre><code># Re-execute the query to reset the cursor position\ncursor.execute(\"SELECT * FROM countries\")\n\n# Fetch several rows using fetchmany()\nprint(\"\\nFetch many rows:\")\nrows = cursor.fetchmany(3)\nfor row in rows:\n    print(row)\n</code></pre> <p>Output: <pre><code>Fetch many rows:\n(1, 'Slovakia', 'Bratislava', 432000)\n(2, 'Hungary', 'Budapest', 1759000)\n(3, 'Czech Republic', 'Prague', 1280000)\n</code></pre></p> </li> </ul>","tags":["PyMySQL","MySQL","SQL","Tutorial"]},{"location":"getting-started/package-articles/pymysql/#closing-the-connection","title":"Closing the connection","text":"<p>Each open connection to a database uses resources both on the application side and the database server side. By closing the connection when it's no longer needed, you free up these resources, which can improve the performance of both the application and the database server. You can close a connection as follows:</p> <pre><code>connection.close()\n</code></pre>","tags":["PyMySQL","MySQL","SQL","Tutorial"]},{"location":"getting-started/package-articles/pymysql/#project-ideas","title":"Project Ideas","text":"<p>PyMySQL can be used for a variety of use cases and projects, making it a versatile tool for working with MySQL. Here are some examples of projects and use cases where PyMySQL can be applied:</p> <ul> <li> <p>Inventory Management System: Develop a system for businesses to manage their stock, including features to track inventory levels, sales, orders, and suppliers.</p> </li> <li> <p>School Management System: Create a system for schools to manage student records, grades, attendance, and teacher assignments.</p> </li> <li> <p>E-commerce Website Backend: Develop the backend for an e-commerce website, handling product listings, user accounts, shopping carts, and order processing.</p> </li> <li> <p>Booking and Reservation System: An application for booking appointments or making reservations, such as for hotels or restaurants.</p> </li> </ul> <p>In this article, we have explored the PyMySQL library, which empowers users to interact with MySQL databases effortlessly. With the knowledge you've gained from this article, you're well-equipped to start integrating MySQL databases into your Python applications. From setting up connections and executing queries to fetching results and managing transactions, PyMySQL covers all the essentials you need for database operations. Plus, with the project ideas provided, you have a great starting point to explore and apply these skills in real-world scenarios.</p> <p>Remember, the key to mastering PyMySQL, like any library, lies in practice and experimentation. Don't hesitate to try out new ideas and build your own unique applications using this versatile library. Also, always remember to close a connection when it is no longer needed and free up resources. Happy coding!</p>","tags":["PyMySQL","MySQL","SQL","Tutorial"]},{"location":"getting-started/package-articles/pymysql/#faqs","title":"FAQs","text":"What is PyMySQL? <p>PyMySQL is a library in Python that enables you to interact with MySQL databases. It allows you to connect to a MySQL database, execute SQL queries, and manage data.</p> How is PyMySQL different from MySQLdb? <p>PyMySQL is written entirely in Python and is a pure-Python MySQL client, whereas MySQLdb is a C module that needs to be compiled against MySQL. PyMySQL is often used as a MySQLdb replacement and is compatible with Python 3.</p> How do you install PyMySQL? <p>You can install PyMySQL using pip: <code>pip install pymysql</code>. This is the standard method for installing Python packages.</p> Is PyMySQL compatible with MySQL and MariaDB? <p>Yes, PyMySQL works with both MySQL and MariaDB databases. It's designed to be a drop-in replacement for MySQLdb, which is compatible with these databases.</p> How do you handle transactions in PyMySQL? <p>Transactions in PyMySQL are managed through the connection object. After executing your queries, you use <code>connection.commit()</code> to commit the transaction or <code>connection.rollback()</code> to roll back the transaction.</p> What is the purpose of the cursor in PyMySQL? <p>A cursor is a Python object that allows you to execute MySQL queries and retrieve results. It provides methods like <code>execute()</code>, <code>fetchone()</code>, <code>fetchall()</code>, and <code>fetchmany()</code> for these purposes.</p> How do you manage database connections in PyMySQL? <p>Database connections should be properly opened and closed to manage resources efficiently. Use <code>pymysql.connect()</code> to open a connection and <code>connection.close()</code> to close it. It\u2019s a good practice to use Python's with statement or try-except-finally blocks to ensure connections are closed even when an error occurs.</p> Can you use PyMySQL for complex queries and stored procedures? <p>Yes, PyMySQL supports executing complex SQL queries, including joins, subqueries, and stored procedures. You can execute any SQL command that MySQL supports.</p>","tags":["PyMySQL","MySQL","SQL","Tutorial"]},{"location":"getting-started/package-articles/pymysql/#related-articles","title":"Related Articles","text":"pymysql download stats and details <p>pymysql package details and statistics</p> <p>https://www.piptrends.com/package/pymysql</p> PyMySQL <p>Pure Python MySQL Driver</p> <p>https://pypi.org/project/PyMySQL/</p> towardsdatascience.com <p>https://towardsdatascience.com/pymysql-connecting-python-and-sql-for-data-science-91e7582d21d7</p> medium.com <p>https://medium.com/swlh/python-mysql-baby-steps-with-pymysql-89d62191f312</p> Connect to MySQL using PyMySQL in Python - GeeksforGeeks <p>A Computer Science portal for geeks. It contains well written, well thought and well explained computer science and programming articles, quizzes and practice/competitive programming/company interview Questions.</p> <p>https://www.geeksforgeeks.org/connect-to-mysql-using-pymysql-in-python/</p> SQL \u2013 A Complete Guide for Beginners | Syncfusion Blogs <p>This blog explains the basic concepts of the SQL (Structured Query Language) that every beginner should know to manage data with code examples.</p> <p>https://www.syncfusion.com/blogs/post/sql-a-complete-guide-for-beginners</p>","tags":["PyMySQL","MySQL","SQL","Tutorial"]},{"location":"getting-started/package-articles/python-docx/","title":"Python-docx","text":"","tags":["python-docx","Microsoft Word","documents","Tutorial"]},{"location":"getting-started/package-articles/python-docx/#introduction","title":"Introduction","text":"<p>Python-docx is a powerful Python library designed to handle Microsoft Word documents with ease. It offers a convenient way to create, edit, and extract information from Word files without the need for Microsoft Office Suite. With Python-docx, you can effortlessly generate new Word documents, make modifications to existing ones, and efficiently extract data like text, tables, and images.</p> <p>Its simplicity and user-friendly nature make it a perfect choice for anyone looking to perform basic document processing tasks in Python, regardless of their programming expertise. Whether you're a newcomer to Python or an experienced developer, this library simplifies the process of working with Word documents, streamlining your projects and saving valuable time.</p> <p>Throughout this article, we will delve into the fundamentals of using Python-docx, empowering you with the necessary knowledge to embark on your own projects with confidence. Get ready to unlock the potential of Python-docx and elevate your document processing capabilities to new heights.</p>","tags":["python-docx","Microsoft Word","documents","Tutorial"]},{"location":"getting-started/package-articles/python-docx/#installing-python-docx","title":"Installing Python-docx","text":"<p>To begin using Python-docx, you must first install the library on your computer. This straightforward process can be accomplished using pip, the Python package manager.</p> <p>To install Python-docx, simply open your terminal or command prompt and enter the following command:</p> <p><pre><code>pip install python-docx\n</code></pre> Once the installation process is complete, you'll be all set to harness the capabilities of Python-docx in your projects. So go ahead and execute the command, and let's get started with the exciting world of working with Word documents using Python!</p>","tags":["python-docx","Microsoft Word","documents","Tutorial"]},{"location":"getting-started/package-articles/python-docx/#creating-a-word-document","title":"Creating a Word Document","text":"<p>To begin crafting a fresh Word document using Python-docx, start by importing the library into your Python script. Then, utilize the docx.Document class, which allows you to easily generate a new document.</p> <p>Here's an illustrative example:</p> <pre><code>import docx\n\ndocument = docx.Document()\ndocument.save(\"new_document.docx\")\n</code></pre> <p>With the above code snippet, a brand new Word document is born, and it is promptly saved under the name \"new_document.docx.\" The document is stored in the same directory where your Python script resides.</p> <p>Now that your canvas is set, you have the freedom to embellish it by adding text, images, and various other elements to make it visually appealing and informative. In the subsequent sections, we will walk you through the process of adding text and applying formatting to customize your document further. Get ready to unleash the power of Python-docx to create impressive Word documents effortlessly!</p>","tags":["python-docx","Microsoft Word","documents","Tutorial"]},{"location":"getting-started/package-articles/python-docx/#adding-text","title":"Adding Text","text":"<p>To infuse your Word document with compelling content, you can employ the add_paragraph method of the docx.Document class. This method serves as your gateway to creating and filling new paragraphs with text.</p> <p>Let's take a look at an example:</p> <pre><code>import docx\n\ndocument = docx.Document()\n\nparagraph = document.add_paragraph(\"This is a sample paragraph.\")\n\ndocument.save(\"new_document.docx\")\n</code></pre> <p>With the code above, a new paragraph springs to life within the document, gracefully adorned with the text \"This is a sample paragraph.\"</p> <p>To enrich your document further, you can effortlessly introduce multiple paragraphs by replicating the add_paragraph method. Moreover, if you wish to append text to an existing paragraph, the add_run method of the docx.text.Paragraph class will be your faithful companion.</p> <p>Let's delve into another example to illustrate this: <pre><code>import docx\n\ndocument = docx.Document()\n\nparagraph = document.add_paragraph(\"This is the first paragraph.\")\nparagraph.add_run(\" This is added text to the first paragraph.\")\n\ndocument.add_paragraph(\"This is the second paragraph.\")\n\ndocument.save(\"new_document.docx\")\n</code></pre> In this case, two paragraphs come to life within the document. The first paragraph not only carries its initial content but also graciously accommodates additional text, thanks to the add_run method.</p> <p>With these powerful tools at your disposal, you can now confidently imbue your Word document with captivating text, expressing your ideas with eloquence and style. Keep exploring the possibilities of Python-docx to take your document creation to new heights!</p>","tags":["python-docx","Microsoft Word","documents","Tutorial"]},{"location":"getting-started/package-articles/python-docx/#formatting-text","title":"Formatting Text","text":"<p>Python-docx provides various options to format text in a Word document, such as applying bold, italics, underlining, changing font size, and modifying color. These formatting options can be easily implemented by adjusting properties on the docx.text.Run object.</p> <p>Let's explore an example to understand how to format text within a paragraph:</p> <p><pre><code>import docx\n\ndocument = docx.Document()\n\nparagraph = document.add_paragraph(\"This is a sample paragraph with formatted text.\")\n\nrun = paragraph.runs[0]\n\nrun.bold = True\nrun.italic = True\nrun.underline = True\nrun.font.size = 24\nrun.font.color.rgb = docx.shared.RGBColor(0x42, 0x24, 0xE9)\n\ndocument.save(\"new_document.docx\")\n</code></pre> In the above code, we create a new document and introduce a paragraph with specific text. Then, we format the text by setting properties on the run object. In this case, the text will appear bold, italicized, underlined, and have a font size of 24. Additionally, the text color will be set to a custom RGB color.</p> <p>For more intricate formatting, you can split the run object into different parts and apply distinct formatting options to each segment:</p> <pre><code>import docx\n\ndocument = docx.Document()\n\nparagraph = document.add_paragraph(\"This is a sample paragraph with formatted text.\")\n\nrun = paragraph.runs[0]\n\nbold_run = run.bold()\nbold_run.text = \"bold text, \"\n\nitalic_run = run.italic()\nitalic_run.text = \"italic text, \"\n\nunderline_run = run.underline()\nunderline_run.text = \"underlined text, \"\n\nfont_run = run.font(size=24, color=docx.shared.RGBColor(0x42, 0x24, 0xE9))\nfont_run.text = \"formatted text.\"\n\ndocument.save(\"new_document.docx\")\n</code></pre> <p>In this example, the text in the paragraph is divided into separate runs, allowing for fine-grained control over individual formatting. Each segment is then formatted accordingly, producing a diverse and visually appealing outcome.</p> <p>Now that you're well-equipped with the knowledge of text formatting, you can confidently create captivating Word documents with Python-docx. Use your newfound skills to craft engaging content and effectively communicate your ideas in style!</p>","tags":["python-docx","Microsoft Word","documents","Tutorial"]},{"location":"getting-started/package-articles/python-docx/#adding-images","title":"Adding Images","text":"<p>To enhance the visual appeal of your Word document, you can effortlessly incorporate images using Python-docx. With the aid of the add_picture method from the docx.text.Paragraph class, you can seamlessly integrate image files into your document.</p> <p>Let's explore a couple of examples to demonstrate how to add images:</p> <pre><code>import docx\n\ndocument = docx.Document()\n\nparagraph = document.add_paragraph(\"This is a sample paragraph with an image.\")\n\npicture = paragraph.add_picture(\"image.png\")\n\ndocument.save(\"new_document.docx\")\n</code></pre> <p>In the above code, we initiate a new paragraph in the document and include descriptive text. Subsequently, we employ the add_picture method to import an image from the file named \"image.png\". The image is seamlessly embedded within the text, maintaining its position even when you modify the document's layout.</p> <p>If you desire more control over the image's size and placement, you can easily specify these parameters as well:</p> <pre><code>import docx\n\ndocument = docx.Document()\n\nparagraph = document.add_paragraph(\"This is a sample paragraph with an image.\")\n\npicture = paragraph.add_picture(\"image.png\", width=docx.shared.Inches(3), height=docx.shared.Inches(2), left=docx.shared.Inches(0.5))\n\ndocument.save(\"new_document.docx\")\n</code></pre> <p>In this case, the code remains quite similar to the previous example, but we now define specific width and height values for the image. Additionally, we designate its position by setting its distance to 0.5 inches to the left of the text.</p> <p>With the flexibility and simplicity offered by Python-docx, you can seamlessly integrate images into your Word document, enlivening your content and making it more visually engaging. Embrace the potential of images to effectively convey information and create impressive documents effortlessly!</p>","tags":["python-docx","Microsoft Word","documents","Tutorial"]},{"location":"getting-started/package-articles/python-docx/#adding-tables","title":"Adding Tables","text":"<p>To add tables to your Word document using Python-docx, you can leverage the add_table method from the docx.text.Document class. This intuitive method allows you to effortlessly create tables within your document, empowering you to organize and display tabular data with ease.</p> <p>Let's dive into an example to demonstrate how to add and manipulate tables: <pre><code>import docx\n\ndocument = docx.Document()\n\ntable = document.add_table(rows=2, cols=2)\n\ntable.cell(0, 0).text = \"First Cell\"\ntable.cell(0, 1).text = \"Second Cell\"\ntable.cell(1, 0).text = \"Third Cell\"\ntable.cell(1, 1).text = \"Fourth Cell\"\n\ndocument.save(\"new_document.docx\")\n</code></pre> In the code above, we initiate a new document and incorporate a 2 x 2 table within it. The add_table method accepts the number of rows and columns as arguments, and it conveniently returns a reference to the table object. By accessing the cells of the table using the cell method, we can effortlessly populate them with the desired text data.</p> <p>Furthermore, you have the flexibility to customize the appearance of the table and its cells to match your preferences:</p> <pre><code>import docx\n\ndocument = docx.Document()\n\ntable = document.add_table(rows=2, cols=2)\n\ntable.cell(0, 0).text = \"First Cell\"\ntable.cell(0, 1).text = \"Second Cell\"\ntable.cell(1, 0).text = \"Third Cell\"\ntable.cell(1, 1).text = \"Fourth Cell\"\n\ntable.columns[0].width = docx.shared.Inches(3)\ntable.columns[1].width = docx.shared.Inches(4)\n\ntable.cell(0, 0).background.color = docx.shared.RGBColor(0x42, 0x24, 0xE9)\ntable.cell(1, 1).background.color = docx.shared.RGBColor(0x42, 0x24, 0xE9)\n\ntable.cell(0, 0).style = \"Table Grid\"\ntable.cell(1, 1).style = \"Table Grid\"\n\ndocument.save(\"new_document.docx\")\n</code></pre> <p>In this example, we set the width of the first column to 3 inches and the second column to 4 inches using the table.columns property. Additionally, we apply background colors to specific cells using the background.color property and define a border style for the cells using the style property of the docx.table.TableCell class.</p> <p>With Python-docx's table manipulation capabilities, you can effortlessly organize and present tabular data in your Word document, making it easier for your readers to interpret and comprehend information effectively. Embrace the power of tables to optimize the structure and presentation of your documents!</p>","tags":["python-docx","Microsoft Word","documents","Tutorial"]},{"location":"getting-started/package-articles/python-docx/#saving-a-document","title":"Saving a Document","text":"<p>After you have diligently crafted and formatted your Word document using Python-docx, it's essential to save it to your disk for viewing, editing, and sharing. The saving process can be seamlessly accomplished by utilizing the save method from the docx.Document class.</p> <p>Let's take a look at an example to understand how to save your document:</p> <pre><code>import docx\n\ndocument = docx.Document()\n\nparagraph = document.add_paragraph(\"This is a sample paragraph.\")\n\ndocument.save(\"sample_document.docx\")\n</code></pre> <p>In the code above, we embark on creating a new Word document and enrich it with a sample paragraph. Once the content is ready, we invoke the save method to save the document to disk. The method takes one argument, which is the desired file name for your saved document. In this instance, the document will be preserved as \"sample_document.docx\".</p> <p>Furthermore, it's important to note that you can save your document multiple times to disk, should you need to make further changes. Each time you save the document, it will overwrite the previous version with the most recent modifications. However, if you wish to retain multiple copies of the document, simply save it under different file names.</p>","tags":["python-docx","Microsoft Word","documents","Tutorial"]},{"location":"getting-started/package-articles/python-docx/#python-docx-projects","title":"Python-docx Projects","text":"<p>Python-docx can be used for a variety of use cases and projects, making it a versatile tool for working with Microsoft Word documents. Here are some examples of projects and use cases where Python-docx can be applied:</p> <ul> <li> <p>Automated Report Generation: Create a script that generates customized reports with dynamic content, such as data tables, charts, and analysis summaries, and saves them as Word documents. This can be useful for businesses, academics, or any scenario that requires periodic report generation.</p> </li> <li> <p>Resume Builder: Develop an application that allows users to input their information and automatically generates a well-formatted resume as a Word document. Users can choose from different templates and styles to personalize their resumes.</p> </li> <li> <p>Document Data Extraction: Build a script that extracts specific data from a large collection of Word documents. For example, you could extract information like dates, names, or specific keywords to analyze trends or patterns.</p> </li> <li> <p>Word Document Conversion: Create a script to convert Word documents to other formats, such as PDF, HTML, or plain text. This can be useful for archiving, sharing, or publishing documents in different formats.</p> </li> </ul> <p>In this article, we have explored the versatile and user-friendly Python-docx library, which empowers users to interact with Microsoft Word documents effortlessly. From creating new documents and adding text, images, and tables to formatting content and saving the final result, learners have acquired a comprehensive set of skills to tackle a wide range of document processing tasks. By understanding Python-docx's capabilities, learners can now confidently embark on projects such as automated report generation, resume builders, and educational tools, streamlining document management and unleashing the potential of this powerful library. Armed with this newfound knowledge, learners can enhance productivity, save valuable time, and explore exciting opportunities in their document-centric endeavors.</p>","tags":["python-docx","Microsoft Word","documents","Tutorial"]},{"location":"getting-started/package-articles/python-docx/#useful-links","title":"Useful Links","text":"<ul> <li>python-docx 0.8.11 documentation</li> <li>PyPi - python-docx</li> <li>Python - Working with .docx module</li> <li>python-docx GitHub - Create and modify Word documents with Python</li> <li>Python In Office - Creating A Word Docx File In Python</li> </ul>","tags":["python-docx","Microsoft Word","documents","Tutorial"]},{"location":"getting-started/package-articles/requests/","title":"requests","text":"","tags":["python","pip","requests","HTTP"]},{"location":"getting-started/package-articles/requests/#what-is-python-requests","title":"What is Python Requests?","text":"<p>In our daily life, we come across various websites, applications and other entities on the internet. All these webpages are basically HTML and are communicating with each other using HTTP protocol. HTTP has various methods through which it interacts with web servers. This interaction is made possible in python thanks to various packages like urllib3, aiohttp, requests, httpx, Here we will be focusing on requests.</p>","tags":["python","pip","requests","HTTP"]},{"location":"getting-started/package-articles/requests/#background","title":"Background","text":"<p>Before we get started, let us have a clear picture of what requests actually does. As the name indicates requests is a popular tool for making HTTP requests. It provides support for both GET and POST requests to website which makes it easier to send any data to website, we will be looking at how to implement these shortly. Requests has over 338M downloads per month and finds its application in web scrapping and other tasks that require making large number of queries as it provides methods to follow redirects, handle cookies, and authenticate with websites</p>","tags":["python","pip","requests","HTTP"]},{"location":"getting-started/package-articles/requests/#getting-started","title":"Getting Started","text":"<p>First and foremost let us install requests. requests officially supports <code>Python 3.7+</code></p> <pre><code>pip install requests\n</code></pre> <p>If you prefer the use of <code>pipenv</code>, you can go with  <pre><code>pipenv install requests\n</code></pre></p> <p>Once this is done, you can use it in your application by importing it.</p> <p><pre><code>import requests\n</code></pre> requests has a very simple syntaxt and it is given by : <pre><code>requests.methodname(params)\n</code></pre> The HTTP request returns a Response Object with all the response data (content, encoding, status, etc).</p> <p>Here the methodname(params) can be : - get(url, params, args) - post(url, data, json, args)  - delete(url, args) - head(url, args)  - patch(url, data, args)   - put(url, data, args)</p> <p>we shall go through each of these one by one.</p>","tags":["python","pip","requests","HTTP"]},{"location":"getting-started/package-articles/requests/#get-method","title":"get Method","text":"<p>The get method in the requests library is used to send an HTTP GET request to a specified URL. This method allows you to retrieve information from a server.</p> <pre><code>url = 'https\u200b://example.com'\nresponse = requests.get(url)\n</code></pre> <p>Here, url is the URL of the resource you want to retrieve. The <code>get</code> method sends a GET request to this URL, and the response is stored in the response variable.</p> <p>We can further improve on this by including query parameters in the GET request by passing a dictionary to the params parameter. For instance:</p> <p><pre><code>params={'search': 'python'}\nresponse = requests.get(url,params)\n</code></pre> will send HTTP GET request <code>https\u200b://example.com?search=python</code>. This is by default none. </p> <p>Similarly, other args can be included for additional request customization, commonly used options are headers, auth, timeout.</p> <p><pre><code>response = requests.get(url,timeout=2.50)\n</code></pre> The timeout=2.50 argument ensures that the request won't hang indefinitely if the server doesn't respond within 2.50 seconds.</p>","tags":["python","pip","requests","HTTP"]},{"location":"getting-started/package-articles/requests/#post-method","title":"post Method","text":"<p>The <code>requests.post(url, data, json, args)</code> method is used to send a POST request to a specified URL. POST requests are designed to send data to a server to create or update it. Consider an example where we have a form and we want to upload files or submit the form, POST request does exactly that.</p> <p>Let us understand this better by considering an example where we are submitting a form with two fields name and email address:</p> <pre><code>data = {'name': 'John Doe', 'email': 'johndoe@example.com'}\nresponse = requests.post('https://example.com/submit-form', data=data)\n</code></pre> <p>Similar to params in <code>get</code>, we use data/json/files here based on requirement. It is safer than <code>get</code> request as the contents of params in <code>get</code> are exposed in the url.</p>","tags":["python","pip","requests","HTTP"]},{"location":"getting-started/package-articles/requests/#delete-method","title":"delete Method","text":"<p>The <code>requests.delete(url, args)</code> is used to ask the server to delete a resource. It's commonly used to remove items from databases, delete files, or cancel actions.</p> <pre><code>url = 'https://example.com/path/to/resource'\nresponse = requests.delete(url)\n</code></pre>","tags":["python","pip","requests","HTTP"]},{"location":"getting-started/package-articles/requests/#head-method","title":"head Method","text":"<p>The <code>requests.head(url, args)</code> method is used to send an HTTP HEAD request to a specified URL. An HTTP HEAD request is similar to a get request, but the server is expected to return only the headers of the response, without the actual content of the requested resource. This can be useful when we are interested in obtaining information about a resource, such as its metadata or headers, without transferring the entire content.</p> <pre><code>url = 'https://www.example.com'\nresponse = requests.head(url)\n</code></pre> <p>The desired property of response object can be accessed by: <pre><code>print(f'Status Code: {response.status_code}')\nprint('Headers:')\nprint(response.headers)\n</code></pre></p>","tags":["python","pip","requests","HTTP"]},{"location":"getting-started/package-articles/requests/#patch-method","title":"patch Method","text":"<p>A PATCH request is used to apply partial modifications to a resource on the server. The data sent in the request represents the changes that should be applied to the resource.</p> <p>In the following example, url is the URL of the resource you want to update, and data is a dictionary containing the changes or modifications to be applied. <pre><code>url = 'https://www.example.com/resource/123'\ndata = {'key': 'new_value'}\nresponse = requests.patch(url, data=data)\n</code></pre></p> <p>This method is used when we want to apply partial updates to a resource instead of replacing the entire resource.</p>","tags":["python","pip","requests","HTTP"]},{"location":"getting-started/package-articles/requests/#put-method","title":"put Method","text":"<p>Unlike the <code>patch</code> method put method is used to replace or create a resource on the server. Which means that the data sent in the request represents the complete replacement of the resource or the creation of a new resource.</p> <p>It's syntax is same as <code>patch</code> method <pre><code>url = 'https://www.example.com/resource/123'\ndata = {'key': 'new_value'}\nresponse = requests.put(url, data=data)\n</code></pre></p>","tags":["python","pip","requests","HTTP"]},{"location":"getting-started/package-articles/requests/#parameter-values","title":"Parameter Values","text":"<p>Following are some params which can be used for addition request customizaton:</p> Parameter Description allow_redirects Optional. A Boolean to enable/disable redirection. Default False (not allowing redirects) auth Optional. A tuple to enable a certain HTTP authentication. Default None cert Optional. A String or Tuple specifying a cert file or key. Default None cookies Optional. A dictionary of cookies to send to the specified url. Default None headers Optional. A dictionary of HTTP headers to send to the specified url. Default None proxies Optional. A dictionary of the protocol to the proxy url. Default None stream Optional. A Boolean indication if the response should be immediately downloaded (False) or streamed (True). Default False timeout Optional. A number, or a tuple, indicating how many seconds to wait for the client to make a connection and/or send a response. Default None which means the request will continue until the connection is closed verify Optional. A Boolean or a String indication to verify the servers TLS certificate or not. Default True","tags":["python","pip","requests","HTTP"]},{"location":"getting-started/package-articles/requests/#response","title":"Response","text":"<p>Every <code>requests.methodname(params)</code> produces a response object which is returned as a result of the HTTP request to the web server. This object can be accessed to verify if our query was successful or not or to extract the required information.  There are three main things to focus on : - Status Code - Content - Headers</p> <p>Let us look at them one by one,</p>","tags":["python","pip","requests","HTTP"]},{"location":"getting-started/package-articles/requests/#status-code","title":"Status Code","text":"<p>A status code informs you of the status of the request if the request was successful or not. A Status Code of <code>200 OK</code> status means that your request was successful whereas Code <code>404 NOT FOUND</code> status means that the resource we are looking for was not found.</p> <p><pre><code>response = requests.head('https://www.example.com')\n\n#response is the object here.\n\nresponse.status_code\n</code></pre> We can base our actions based on the returned value. 200 OK and 404 NOT FOUND are not the only Status Codes, there is a whole list of them, this is a discussion for some other day.</p>","tags":["python","pip","requests","HTTP"]},{"location":"getting-started/package-articles/requests/#content","title":"Content","text":"<p>The response.content attribute in the requests library represents the raw binary content of the server's response. It returns the content in bytes. </p> <p>Let us understand this better by looking at this example: <pre><code>response = requests.get('https://api.github.com')\nresponse.content\n&gt; b'{\"current_user_url\":\"https://api.github.com/user\",......,\"user_search_url\":\"https://api.github.com/search/users?q={query}{&amp;page,per_page,sort,order}\"}'\n</code></pre></p> <p>We can convert this to string by specifying .text : <pre><code>response = requests.get('https://api.github.com')\nresponse.text\n</code></pre></p> <p>You can find out what encoding requests is using, and change it, using the <code>r.encoding</code> property : <pre><code>response.encoding\n&gt; 'utf-8'\nresponse.encoding = 'ISO-8859-1'\n</code></pre></p> <p>Similarly there\u2019s also a builtin JSON decoder, in case you\u2019re dealing with JSON data: <pre><code>response.json()\n</code></pre></p>","tags":["python","pip","requests","HTTP"]},{"location":"getting-started/package-articles/requests/#headers","title":"Headers","text":"<p>Headers are metadata associated with the server's response to the request. They provide additional information about the server's handling of the request, the content being sent, and other details. Common headers include Content-Type, Content-Length, Date, Server, Set-Cookie, Cache-Control, Location.</p> <p>Below is a example of how it the response looks like : <pre><code>response.headers\n&gt; {'Server': 'GitHub.com', 'Date': 'Mon, 10 Dec 2018 17:49:54 GMT', 'Content-Type': 'application/json; charset=utf-8', 'Transfer-Encoding': 'chunked', 'Status': '200 OK', 'X-RateLimit-Limit': '60', 'X-RateLimit-Remaining': '59', 'X-RateLimit-Reset': '1544467794', 'Cache-Control': 'public, max-age=60, s-maxage=60', 'Vary': 'Accept', 'ETag': 'W/\"7dc470913f1fe9bb6c7355b50a0737bc\"', 'X-GitHub-Media-Type': 'github.v3; format=json', 'Access-Control-Expose-Headers': 'ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining, X-RateLimit-Reset, X-OAuth-Scopes, X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type', 'Access-Control-Allow-Origin': '*', 'Strict-Transport-Security': 'max-age=31536000; includeSubdomains; preload', 'X-Frame-Options': 'deny', 'X-Content-Type-Options': 'nosniff', 'X-XSS-Protection': '1; mode=block', 'Referrer-Policy': 'origin-when-cross-origin, strict-origin-when-cross-origin', 'Content-Security-Policy': \"default-src 'none'\", 'Content-Encoding': 'gzip', 'X-GitHub-Request-Id': 'E439:4581:CF2351:1CA3E06:5C0EA741'}\n</code></pre> It returns a dictionary-like object, allowing us to access header values by key : <pre><code>response.headers['Content-Type']\n&gt; 'application/json; charset=utf-8'\n</code></pre></p>","tags":["python","pip","requests","HTTP"]},{"location":"getting-started/package-articles/requests/#perfomance","title":"Perfomance","text":"<p>requests provide feautres like timeout control, sessions, and retry limits to help us keep our application running smoothly.</p>","tags":["python","pip","requests","HTTP"]},{"location":"getting-started/package-articles/requests/#timeouts","title":"Timeouts","text":"<p>When making requests to external services, what if the request is never addressed? In such cases it becomes crucial to set a timeout to avoid potential issues like service backlogs, degraded user experiences, or hanging background jobs. <pre><code>requests.get('https://example.com/', timeout=3.05)\n</code></pre> <pre><code>requests.get('https://example.com', timeout=(2, 5))\n</code></pre> The timeout can be passed a tuple like above, here the first element is the time it allows for the client to establish a connection to the server. The second element is the time it will wait on a response once your client has established a connection.</p>","tags":["python","pip","requests","HTTP"]},{"location":"getting-started/package-articles/requests/#max-retries","title":"Max Retries","text":"<p>Suppose a request fails, for some particular reason but you may want your application to retry the same request after some time. We can achieve this in requests by implementing a custom Transport Adapter. Consider an example where we want all requests to https://api.example.com to retry three times before finally raising a ConnectionError, We would build a Transport Adapter, set its max_retries parameter, and mount it to an existing Session :   <pre><code>import requests\nfrom requests.adapters import HTTPAdapter\nfrom requests.exceptions import ConnectionError\n\nadapter = HTTPAdapter(max_retries=3)\n\nsession = requests.Session()\n\n# Use `adapter` for all requests to endpoints that start with this URL\n\nsession.mount('https://api.example.com', adapter)\n\ntry:\n    session.get('https://api.example.com')\nexcept ConnectionError as ce:\n    print(ce)\n</code></pre></p>","tags":["python","pip","requests","HTTP"]},{"location":"getting-started/package-articles/requests/#advanced-application","title":"Advanced Application","text":"<p>We have explored various funcationalities of requests that sending data through POST, PUT, and PATCH requests, adapting to different content types. Apart from this requests can be used as Authentication mechanisms, such as Basic and token-based authentication, SSL Certificate verifications, Web Scraping, Data Streaming and much more. </p>","tags":["python","pip","requests","HTTP"]},{"location":"getting-started/package-articles/requests/#further-reading","title":"Further Reading","text":"<ul> <li>requests 2.31.0 Pypi</li> <li>Requests: HTTP for Humans\u2122</li> <li>Python Requests - Quick guide</li> </ul>","tags":["python","pip","requests","HTTP"]},{"location":"getting-started/package-comparison/django-fastapi-flask/","title":"Django vs FastAPI vs Flask","text":"<p>When developing web applications in Python, choosing the right framework can significantly impact your project's success. Flask, Django, and FastAPI are three popular options, each with its own strengths and trade-offs. This article explores these frameworks with practical examples to help you make an informed decision.</p>","tags":["flask","django","fastapi","comparison","web framework"]},{"location":"getting-started/package-comparison/django-fastapi-flask/#flask-the-lightweight-framework","title":"Flask: The Lightweight Framework","text":"","tags":["flask","django","fastapi","comparison","web framework"]},{"location":"getting-started/package-comparison/django-fastapi-flask/#overview","title":"Overview","text":"<p>Flask is a micro-framework designed to be simple, lightweight and flexible. It provides the essentials for web development but lacks several built-in features compared to other frameworks. Flask follows the MVC (model-view-controller) architectural pattern and supports Jinja templates, which can be used to create views. Flask is ideal for small to medium-sized projects where you need more control over your application\u2019s components. Flask applications do not have a standardized structure and depend among developers.</p>","tags":["flask","django","fastapi","comparison","web framework"]},{"location":"getting-started/package-comparison/django-fastapi-flask/#sample-code","title":"Sample Code","text":"<pre><code>from flask import Flask\n\napp = Flask(__name__)\n\n\n@app.route(\"/\", methods=[\"GET\"])\ndef hello():\n    return \"Hello, World!\"\n\nif __name__ == '__main__':\n    app.run(debug=True)\n</code></pre>","tags":["flask","django","fastapi","comparison","web framework"]},{"location":"getting-started/package-comparison/django-fastapi-flask/#pros","title":"Pros","text":"<ul> <li>Simple and easy to learn</li> <li>Highly flexible and modular</li> <li>Large community with plenty of extensions</li> </ul>","tags":["flask","django","fastapi","comparison","web framework"]},{"location":"getting-started/package-comparison/django-fastapi-flask/#cons","title":"Cons","text":"<ul> <li>Requires more manual setup and configuration</li> <li>Less built-in functionality compared to other frameworks</li> <li>No standard structure</li> </ul>","tags":["flask","django","fastapi","comparison","web framework"]},{"location":"getting-started/package-comparison/django-fastapi-flask/#django-the-full-featured-framework","title":"Django: The Full-Featured Framework","text":"","tags":["flask","django","fastapi","comparison","web framework"]},{"location":"getting-started/package-comparison/django-fastapi-flask/#overview_1","title":"Overview","text":"<p>Django is a high-level framework that follows the \"batteries-included\" philosophy. It provides a comprehensive set of tools and features, including an ORM (Object-Relational Mapper), authentication, and an admin interface. Django follows the MTV (model-template-view) architectural pattern and a DRY principle (Don\u2019t Repeat Yourself). With all the features, using Django can be a little difficult and requires some learning and familiarity to use it effectively. Thanks to the extensive documentation and a large open-source community, it's easy to get wide support and solutions. </p>","tags":["flask","django","fastapi","comparison","web framework"]},{"location":"getting-started/package-comparison/django-fastapi-flask/#sample-code_1","title":"Sample Code","text":"<pre><code>#myapp/views.py\n\nfrom django.http import HttpResponse\n\ndef hello(request):\n    return HttpResponse(\"Hello, World!\")\n</code></pre> <pre><code>#myapp/urls.py\n\nfrom django.urls import path\n\nfrom .views import home_page_view\n\nurlpatterns = [\n    path(\"\", hello, name=\"home\"),\n]\n</code></pre> <pre><code>#myproject/urls.py\n\nfrom django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path(\"admin/\", admin.site.urls),\n    path(\"\", include(\"pages.urls\")),\n]\n</code></pre>","tags":["flask","django","fastapi","comparison","web framework"]},{"location":"getting-started/package-comparison/django-fastapi-flask/#pros_1","title":"Pros","text":"<ul> <li>Rich feature set </li> <li>Strong security features and best practices</li> <li>Excellent documentation and community support</li> </ul>","tags":["flask","django","fastapi","comparison","web framework"]},{"location":"getting-started/package-comparison/django-fastapi-flask/#cons_1","title":"Cons","text":"<ul> <li>Less flexible due to its convention-driven design</li> <li>Can be overkill for small projects</li> <li>Lower performance due to rich built-in features</li> </ul>","tags":["flask","django","fastapi","comparison","web framework"]},{"location":"getting-started/package-comparison/django-fastapi-flask/#fastapi-the-modern-framework","title":"FastAPI: The Modern Framework","text":"","tags":["flask","django","fastapi","comparison","web framework"]},{"location":"getting-started/package-comparison/django-fastapi-flask/#overview_2","title":"Overview","text":"<p>FastAPI is a modern, high-performance framework for building APIs with Python. It leverages type hints and asynchronous programming to provide a fast and efficient way to develop APIs. FastAPI can generate interactive documentation based on your code, improving API development and testing efficiency. You may need some prior knowledge of asynchronous programming to be able to understan FastAPI better.</p>","tags":["flask","django","fastapi","comparison","web framework"]},{"location":"getting-started/package-comparison/django-fastapi-flask/#sample-code_2","title":"Sample Code","text":"<pre><code>from fastapi import FastAPI\n\napp = FastAPI()\n\n@app.get(\"/\")\ndef hello():\n    return \"Hello, World!\"\n</code></pre> <p>Asynchronize Code using FastAPI:</p> <pre><code>from fastapi import FastAPI\n\napp = FastAPI()\n\n@app.get(\"/\")\nasync def hello():\n    return \"Hello, World!\"\n</code></pre>","tags":["flask","django","fastapi","comparison","web framework"]},{"location":"getting-started/package-comparison/django-fastapi-flask/#pros_2","title":"Pros","text":"<ul> <li>Very fast and efficient</li> <li>Automatic API documentation with Swagger and ReDoc</li> <li>Easy to use type hints and validation</li> </ul>","tags":["flask","django","fastapi","comparison","web framework"]},{"location":"getting-started/package-comparison/django-fastapi-flask/#cons_2","title":"Cons","text":"<ul> <li>Newer and less mature compared to Flask and Django</li> <li>Primarily focused on APIs, so it may lack some features for traditional web applications</li> </ul>","tags":["flask","django","fastapi","comparison","web framework"]},{"location":"getting-started/package-comparison/django-fastapi-flask/#conclusion","title":"Conclusion","text":"<p>Choosing between Flask, Django, and FastAPI depends on your project's requirements:</p> <p>Flask is best if you need a lightweight, flexible framework and prefer to build your stack from scratch. Django is ideal for large-scale applications requiring a comprehensive feature set and rapid development. FastAPI excels in scenarios where performance and modern API development practices are critical. Each framework has its strengths and is suited to different types of projects. Consider your specific needs, including performance requirements, development speed, and the complexity of your application, to make the best choice.</p>","tags":["flask","django","fastapi","comparison","web framework"]},{"location":"getting-started/package-comparison/django-fastapi-flask/#related-articles","title":"Related Articles","text":"Comparison of FastAPI with Django and Flask - GeeksforGeeks <p>A Computer Science portal for geeks. It contains well written, well thought and well explained computer science and programming articles, quizzes and practice/competitive programming/company interview Questions.</p> <p>https://www.geeksforgeeks.org/comparison-of-fastapi-with-django-and-flask/</p> medium.com <p>https://medium.com/@tubelwj/comparison-of-flask-django-and-fastapi-advantages-disadvantages-and-use-cases-63e7c692382a</p>  Django vs Flask vs FastAPI: Which Python Web Framework is Right for You? <p>Django, Flask, and FastAPI are three of the most popular Python web frameworks. These are the three names comes to everyone's mind when we talk about python for web development.</p> <p>https://www.linkedin.com/pulse/django-vs-flask-fastapi-which-python-web-framework-right-gopi-maran/</p>","tags":["flask","django","fastapi","comparison","web framework"]},{"location":"getting-started/python-basics/install-packages/","title":"Installing Packages Using pip","text":"","tags":["python","pip","packages","installation","tutorial"]},{"location":"getting-started/python-basics/install-packages/#what-is-a-package","title":"What is a Package?","text":"<p>A package contains all the files you need for a module. Modules are Python code libraries you can include in your project.</p>","tags":["python","pip","packages","installation","tutorial"]},{"location":"getting-started/python-basics/install-packages/#installing-a-package","title":"Installing a package","text":"<p>If you\u2019re using Windows, you\u2019ll be able to install a Python package by opening the Windows Command Prompt, and then typing this command:</p> <pre><code>pip install package_name\n</code></pre>","tags":["python","pip","packages","installation","tutorial"]},{"location":"getting-started/python-basics/install-packages/#uninstalling-a-package","title":"Uninstalling a package","text":"<p>To uninstall a package using PIP, simply type the following command in the Command Prompt :</p> <pre><code>pip uninstall package_name\n</code></pre>","tags":["python","pip","packages","installation","tutorial"]},{"location":"getting-started/python-basics/install-packages/#generating-a-requirementstxt-file","title":"Generating a requirements.txt file","text":"<p><code>pip freeze</code> is used to generate a list of all the installed Python packages and their versions in the current environment which can used when you want to create a <code>requirements.txt</code> file, which lists all the dependencies of your project, including their specific versions. </p> <p>Usage:</p> <pre><code>pip freeze &gt; requirements.txt\n</code></pre>","tags":["python","pip","packages","installation","tutorial"]},{"location":"getting-started/python-basics/install-packages/#list-packages","title":"List Packages","text":"<p><code>pip list</code> is used to display all packages installed. It does not output the packages in the format required for a requirements.txt file. Instead, it simply displays a more human-readable list of installed packages with their version numbers.</p> <p>Usage:  <pre><code>pip list\n</code></pre></p> <p>*Result -  <pre><code>Package         Version\n-----------------------\ncamelcase       0.2\nmysql-connector 2.1.6\npip             18.1\npymongo         3.6.1\nsetuptools      39.0.1\n</code></pre></p>","tags":["python","pip","packages","installation","tutorial"]},{"location":"getting-started/python-basics/install-packages/#pip-freeze-vs-pip-list","title":"pip freeze vs pip list","text":"<p>The main difference between <code>pip freeze</code> and <code>pip list</code> is in the output format. <code>pip freeze</code> outputs the package names and versions in a format that can be directly used to recreate the environment, while <code>pip list</code> provides a more user-friendly display of installed packages without the version information explicitly formatted for a <code>requirements.txt</code> file.</p> <p><sub><sup>*Result may vary depending on the packages installed on your system.</sup></sub></p>","tags":["python","pip","packages","installation","tutorial"]},{"location":"getting-started/python-basics/install-python/","title":"Installing Python on Windows","text":"","tags":["python","beginners","packages","windows","tutorial"]},{"location":"getting-started/python-basics/install-python/#prerequisites","title":"Prerequisites","text":"<p>You\u2019ll need a computer running Windows 10 with administrative privileges and an internet connection.</p>","tags":["python","beginners","packages","windows","tutorial"]},{"location":"getting-started/python-basics/install-python/#downloading-the-python-installer","title":"Downloading the Python Installer","text":"<ol> <li>Go to the official Python download page for Windows.</li> <li>Find a stable Python 3 release. This tutorial was tested with Python version 3.10.10.</li> <li>Click the appropriate link for your system to download the executable file: Windows installer (64-bit) or Windows installer (32-bit).</li> </ol>","tags":["python","beginners","packages","windows","tutorial"]},{"location":"getting-started/python-basics/install-python/#running-the-executable-installer","title":"Running the Executable Installer","text":"<ol> <li>After the installer is downloaded, double-click the <code>.exe</code> file, for example <code>python-3.10.10-amd64.exe</code>, to run the Python installer.</li> <li>Select the Install launcher for all users checkbox, which enables all users of the computer to access the Python launcher application.</li> <li>Select the Add python.exe to PATH checkbox, which enables users to launch Python from the command line.</li> <li>If you\u2019re just getting started with Python and you want to install it with default features as described in the dialog, then click Install Now and go to Verify the Python Installation. To install other optional and advanced features, click Customize installation and continue.</li> <li>The Optional Features include common tools and resources for Python and you can install all of them, even if you don\u2019t plan to use them.</li> </ol> <p>Select some or all of the following options: * Documentation: recommended * pip: recommended if you want to install other Python packages, such as NumPy or pandas * tcl/tk and IDLE: recommended if you plan to use IDLE or follow tutorials that use it * Python test suite: recommended for testing and learning * py launcher and for all users: recommended to enable users to launch Python from the command line</p> <ol> <li> <p>Click Next.</p> </li> <li> <p>The Advanced Options dialog displays.</p> </li> </ol> <p>Select the options that suit your requirements:</p> <ul> <li>Install for all users: recommended if you\u2019re not the only user on this computer</li> <li>Associate files with Python: recommended, because this option associates all the Python file types with the launcher or editor</li> <li>Create shortcuts for installed applications: recommended to enable shortcuts for Python applications</li> <li>Add Python to environment variables: recommended to enable launching Python</li> <li>Precompile standard library: not required, it might down the installation</li> <li>Download debugging symbols and Download debug binaries: recommended only if you plan to create C or C++ extensions</li> </ul> <p>Make note of the Python installation directory in case you need to reference it later.</p> <ol> <li> <p>Click Install to start the installation.</p> </li> <li> <p>After the installation is complete, a Setup was successful message displays.</p> </li> </ol>","tags":["python","beginners","packages","windows","tutorial"]},{"location":"getting-started/python-basics/install-python/#adding-python-to-the-environment-variables-optional","title":"Adding Python to the Environment Variables (optional)","text":"<p>Skip this step if you selected Add Python to environment variables during installation.</p> <p>If you want to access Python through the command line but you didn\u2019t add Python to your environment variables during installation, then you can still do it manually.</p> <p>Before you start, locate the Python installation directory on your system. The following directories are examples of the default directory paths:</p> <p><code>C:\\Program Files\\Python310</code>: if you selected Install for all users during installation, then the directory will be system wide <code>C:\\Users\\Sammy\\AppData\\Local\\Programs\\Python\\Python310</code>: if you didn\u2019t select Install for all users during installation, then the directory will be in the Windows user path Note that the folder name will be different if you installed a different version, but will still start with <code>Python</code>.</p> <ol> <li>Go to Start and enter advanced system settings in the search bar.</li> <li>Click View advanced system settings.</li> <li>In the System Properties dialog, click the Advanced tab and then click Environment Variables.</li> <li> <p>Depending on your installation:</p> <ul> <li>If you selected Install for all users during installation, select Path from the list of System Variables and click Edit.</li> <li>If you didn\u2019t select Install for all users during installation, select Path from the list of User Variables and click Edit.</li> <li>Click New and enter the Python directory path, then click OK until all the dialogs are closed.</li> </ul> </li> </ol>","tags":["python","beginners","packages","windows","tutorial"]},{"location":"getting-started/python-basics/install-python/#verify-the-python-installation","title":"Verify the Python Installation","text":"<p>You can verify whether the Python installation is successful either through the command line or through the Integrated Development Environment (IDLE) application, if you chose to install it.</p> <p>Go to Start and enter <code>cmd</code> in the search bar. Click Command Prompt.</p> <p>Enter the following command in the command prompt:</p> <pre><code>python --version\n</code></pre> <p>An example of the output is:</p> <pre><code>Python 3.10.10\n</code></pre> <p>You can also check the version of Python by opening the IDLE application. Go to Start and enter <code>python</code> in the search bar and then click the IDLE app, for example IDLE (Python 3.10 64-bit).</p> <p>You can start coding in Python using IDLE or your preferred code editor.</p>","tags":["python","beginners","packages","windows","tutorial"]},{"location":"tags/","title":"Tags","text":""},{"location":"tags/#asynchronous-io","title":"Asynchronous I/O","text":"<ul> <li>asyncio \u2014 Asynchronous I/O</li> </ul>"},{"location":"tags/#data-visualization","title":"Data Visualization","text":"<ul> <li>matplotlib</li> </ul>"},{"location":"tags/#http","title":"HTTP","text":"<ul> <li>requests</li> </ul>"},{"location":"tags/#microsoft-word","title":"Microsoft Word","text":"<ul> <li>Python-docx</li> </ul>"},{"location":"tags/#mysql","title":"MySQL","text":"<ul> <li>PyMySQL</li> </ul>"},{"location":"tags/#pymysql","title":"PyMySQL","text":"<ul> <li>PyMySQL</li> </ul>"},{"location":"tags/#pyplot","title":"PyPlot","text":"<ul> <li>matplotlib</li> </ul>"},{"location":"tags/#python","title":"Python","text":"<ul> <li>matplotlib</li> </ul>"},{"location":"tags/#sql","title":"SQL","text":"<ul> <li>PyMySQL</li> </ul>"},{"location":"tags/#tutorial","title":"Tutorial","text":"<ul> <li>matplotlib</li> <li>PyMySQL</li> <li>Python-docx</li> </ul>"},{"location":"tags/#async-await","title":"async await","text":"<ul> <li>asyncio \u2014 Asynchronous I/O</li> </ul>"},{"location":"tags/#asyncio","title":"asyncio","text":"<ul> <li>asyncio \u2014 Asynchronous I/O</li> </ul>"},{"location":"tags/#basics","title":"basics","text":"<ul> <li>Python Basics</li> </ul>"},{"location":"tags/#beautifulsoup","title":"beautifulsoup","text":"<ul> <li>BeautifulSoup4</li> </ul>"},{"location":"tags/#beautifulsoup4","title":"beautifulsoup4","text":"<ul> <li>BeautifulSoup4</li> </ul>"},{"location":"tags/#beginners","title":"beginners","text":"<ul> <li>Installing Python on Windows</li> </ul>"},{"location":"tags/#bs4","title":"bs4","text":"<ul> <li>BeautifulSoup4</li> </ul>"},{"location":"tags/#charts","title":"charts","text":"<ul> <li>Highcharts-core</li> </ul>"},{"location":"tags/#cheatsheets","title":"cheatsheets","text":"<ul> <li>Python Basics</li> </ul>"},{"location":"tags/#comparison","title":"comparison","text":"<ul> <li>Django vs FastAPI vs Flask</li> </ul>"},{"location":"tags/#discord","title":"discord","text":"<ul> <li>Discord.py</li> </ul>"},{"location":"tags/#discord-bot","title":"discord-bot","text":"<ul> <li>Discord.py</li> </ul>"},{"location":"tags/#discordpy","title":"discord.py","text":"<ul> <li>Discord.py</li> </ul>"},{"location":"tags/#django","title":"django","text":"<ul> <li>Django vs FastAPI vs Flask</li> </ul>"},{"location":"tags/#documents","title":"documents","text":"<ul> <li>Python-docx</li> </ul>"},{"location":"tags/#fastapi","title":"fastapi","text":"<ul> <li>Django vs FastAPI vs Flask</li> </ul>"},{"location":"tags/#flask","title":"flask","text":"<ul> <li>Django vs FastAPI vs Flask</li> </ul>"},{"location":"tags/#highcharts-core","title":"highcharts-core","text":"<ul> <li>Highcharts-core</li> </ul>"},{"location":"tags/#installation","title":"installation","text":"<ul> <li>Installing Packages Using pip</li> </ul>"},{"location":"tags/#matplotlib","title":"matplotlib","text":"<ul> <li>matplotlib</li> </ul>"},{"location":"tags/#packages","title":"packages","text":"<ul> <li>Installing Packages Using pip</li> <li>Installing Python on Windows</li> </ul>"},{"location":"tags/#pip","title":"pip","text":"<ul> <li>BeautifulSoup4</li> <li>Discord.py</li> <li>Highcharts-core</li> <li>requests</li> <li>Installing Packages Using pip</li> </ul>"},{"location":"tags/#piptrends","title":"piptrends","text":"<ul> <li>BeautifulSoup4</li> </ul>"},{"location":"tags/#python_1","title":"python","text":"<ul> <li>Python Basics</li> <li>BeautifulSoup4</li> <li>Discord.py</li> <li>Highcharts-core</li> <li>requests</li> <li>Installing Packages Using pip</li> <li>Installing Python on Windows</li> </ul>"},{"location":"tags/#python-library","title":"python library","text":"<ul> <li>asyncio \u2014 Asynchronous I/O</li> </ul>"},{"location":"tags/#python-docx","title":"python-docx","text":"<ul> <li>Python-docx</li> </ul>"},{"location":"tags/#requests","title":"requests","text":"<ul> <li>requests</li> </ul>"},{"location":"tags/#tutorial_1","title":"tutorial","text":"<ul> <li>asyncio \u2014 Asynchronous I/O</li> <li>Installing Packages Using pip</li> <li>Installing Python on Windows</li> </ul>"},{"location":"tags/#web-framework","title":"web framework","text":"<ul> <li>Django vs FastAPI vs Flask</li> </ul>"},{"location":"tags/#windows","title":"windows","text":"<ul> <li>Installing Python on Windows</li> </ul>"}]}